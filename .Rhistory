encounter_id = ADMISSION_ENCNUM,
procedure_id = PROCID,
surgery_date = PROCDATE_SET,
surgery_year = paste0("year_", year(PROCDATE_SET)),
surgery_month = paste0("month_", month(PROCDATE_SET)),
surgery_day = paste0("day_", tolower(weekdays(PROCDATE_SET))),
surgery_hour = paste0("hour_", tolower(hour(IN_OP_ROOM_SET))),
gender = case_when(GENDER == "F" ~ "female",
GENDER == "M" ~ "male"),
age = case_when(PAT_PROC_AGE < 20 ~ "age_teens",
PAT_PROC_AGE >= 20 & PAT_PROC_AGE < 30 ~ "age_twenties",
PAT_PROC_AGE >= 30 & PAT_PROC_AGE < 40 ~ "age_thirties",
PAT_PROC_AGE >= 40 & PAT_PROC_AGE < 50 ~ "age_forties",
PAT_PROC_AGE >= 50 & PAT_PROC_AGE < 60 ~ "age_fifties",
PAT_PROC_AGE >= 60 & PAT_PROC_AGE < 70 ~ "age_sixties",
PAT_PROC_AGE >= 70 & PAT_PROC_AGE < 80 ~ "age_seventies",
PAT_PROC_AGE >= 80 ~ "age_eighties_plus"),
procedure = tolower(paste0("proc_", PROCCODE)),
anesthesia = case_when(ANESTHESIA == "Y" ~ "anesthesia",
ANESTHESIA == "N" ~ "no anesthesia"),
asa_physical_status = case_when(ASA == 1 ~ "asa_status_healthy",
ASA == 2 ~ "asa_status_mild",
ASA == 3 ~ "asa_status_severe_nonthreatening",
ASA == 4 ~ "asa_status_severe_threatening",
ASA == 5 ~ "asa_status_moribund"),
closure = case_when(CLOSURE == "PRI" ~ "closure_primary",
CLOSURE == "OTH" ~ "closure_other"),
emergency = case_when(EMERGENCY == "Y" ~ "emergency",
EMERGENCY == "N" ~ "non_emergency"),
outpatient = case_when(OUTPATIENT == "Y" ~ "outpatient",
OUTPATIENT == "N" ~ "inpatient"),
risk = case_when(RISK == 0 ~ "risk0",
RISK == 1 ~ "risk1",
RISK == 2 ~ "risk2",
RISK == 3 ~ "risk3"),
laparoscope = case_when(SCOPE == "Y" ~ "laparoscope"),
wound_class = case_when(SWCLASS == "C" ~ "wound_clean",
SWCLASS == "CC" ~ "wound_clean_contaminated",
SWCLASS == "CO" ~ "wound_contaminated",
SWCLASS == "D" ~ "wound_dirty"),
trauma = case_when(TRAUMA == "Y" ~ "trauma"),
surgery_length = case_when(
# surgery 1 hour or less
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 1 ~ "surgery_0hour",
# surgery between 1 and 2 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 1 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 2 ~ "surgery_1hour",
# surgery between 2 and 3 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 2 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 3 ~ "surgery_2hour",
# surgery between 3 and 4 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 3 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 4 ~ "surgery_3hour",
# surgery between 4 and 5 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 4 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 5 ~ "surgery_4hour",
# surgery between 5 and 6 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 5 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 6 ~ "surgery_5hour",
# surgery between 6 and 7 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 6 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 7 ~ "surgery_6hour",
# surgery between 7 and 8 hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 7 &
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") < 8 ~ "surgery_7hour",
# surgery 8 or more hours
difftime(OUT_OF_ROOM_SET, IN_OP_ROOM_SET, units = "hours") >= 8 ~ "surgery_8plushour"),
surgeon = paste0("surgeon_", tolower(SURGEON_CODE)),
surgical_service = paste0("surgical_service_", gsub(" ", "_", tolower(SURGICAL_SERVICE))),
surgery_diagnosis = paste0("surgery_diag_", icd9_groups),
bmi = case_when(BMI < 18.5 ~ "bmi_underweight",
BMI >= 18.5 & BMI < 25 ~ "bmi_normal",
BMI >= 25 & BMI < 30 ~ "bmi_overweight",
BMI >= 30 ~ "bmi_obese"),
ethnic_group = paste0("ethnic_group_", tolower(gsub(" ", "_", ETHNIC_GROUP))),
race = paste0("race_", tolower(gsub(" ", "_", PATIENT_RACE))),
smoker = case_when(SMOKING_STATUS %in% c("CURRENT EVERY DAY SMOKER", "HEAVY TOBACCO SMOKER") ~ "heavy_smoker",
SMOKING_STATUS %in% c("CURRENT SOME DAY SMOKER", "LIGHT TOBACCO SMOKER") ~ "light_smoker",
SMOKING_STATUS %in% c("FORMER_SMOKER") ~ "former_smoker",
SMOKING_STATUS %in% c("NEVER SMOKER", "PASSIVE SMOKE EXPOSURE - NEVER SMOKER") ~ "never_smoker",
SMOKING_STATUS %in% c("NEVER ASSESSED", "SMOKER, CURRENT STATUS UNKNOWN", "UNKNOWN IF EVER SMOKED") ~ "unknown_smoker"),
incarcerated = case_when(INCARCERATED == "Y" ~ "incarcerated"),
rbc_transfused = case_when(TOTAL_RBC_TRANSFUSED %in% 1:10 ~ "rbc_transfused_1to10",
TOTAL_RBC_TRANSFUSED %in% 11:20 ~ "rbc_transfused_11to20",
TOTAL_RBC_TRANSFUSED > 20 ~ "rbc_transfused_21plus"),
platelets_transfused = case_when(TOTAL_PLATELETS_TRANSFUSED %in% 1:10 ~ "platelets_transfused_1to10",
TOTAL_PLATELETS_TRANSFUSED > 10 ~ "platelets_transfused_11plus"),
ffp_transfused = case_when(TOTAL_FFP_TRANSFUSED %in% 1:10 ~ "ffp_transfused_1to10",
TOTAL_FFP_TRANSFUSED > 10 ~ "ffp_transfused_11plus"),
cryo_transfused = case_when(TOTAL_CRYO_TRANSFUSED > 0 ~ "cryo_transfused")) %>%
gather(key = "variable", value = "word",
-patient_id, -encounter_id, -procedure_id, -surgery_date) %>%
distinct() %>%
drop_na(word)
# define an ordering of variables
surgical_variables_order <-
tribble(~variable,
"procedure",
"outpatient",
"surgical_service",
"surgery_diagnosis",
"surgeon",
"surgery_year",
"surgery_month",
"surgery_day",
"surgery_hour",
"surgery_length",
"risk",
"closure",
"wound_class",
"asa_physical_status",
"laparoscope",
"anesthesia",
"emergency",
"trauma",
"anesthesia",
"cryo_transfused",
"ffp_transfused",
"rbc_transfused",
"platelets_transfused",
"age",
"bmi",
"race",
"ethnic_group",
"gender",
"smoker",
"incarcerated") %>%
mutate(order = 1:n())
surgical_encounters_categorical_condensed <-
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, encounter_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, encounter_id, procedure_id, surgery_date) %>%
summarise(vitals_results_combined = do.call(paste, as.list(vitals_result))) %>%
ungroup()
head(surgical_encounters_categorical)
surgical_encounters_categorical_condensed <-
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, encounter_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, encounter_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup()
head(surgical_encounters_categorical_condensed)
head(surgical_encounters_categorical_condensed)
surgical_encounters_categorical_condensed <-
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, encounter_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, encounter_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup() %>%
mutate(measurement_type = "surgical_encounters")
colnames(surgical_encounters_categorical_condensed)
surgical_encounters_categorical_condensed <-
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup() %>%
mutate(measurement_type = "surgical_encounters")
colnames(surgical_encounters_categorical_condensed)
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup() %>%
mutate(measurement_type = "surgical_encounters") %>% dim
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup() %>% distinct() %>%
mutate(measurement_type = "surgical_encounters") %>% dim
surgical_encounters_categorical_condensed <-
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup() %>%
mutate(measurement_type = "surgical_encounters")
colnames(surgical_encounters_categorical_condensed)
surgical_encounters_categorical_condensed <-
# arrange all patient info in the same order
surgical_encounters_categorical %>%
left_join(surgical_variables_order, by = "variable") %>%
group_by(patient_id, procedure_id, surgery_date) %>%
arrange(order) %>%
ungroup() %>%
# condense into single variable
group_by(patient_id, procedure_id, surgery_date) %>%
summarise(surgical_encounters_combined = do.call(paste, as.list(word))) %>%
ungroup() %>%
mutate(measurement_type = "surgical_encounters") %>%
select(patient_id, date = surgery_date, measurement_type,
results = surgical_encounters_combined)
colnames(surgical_encounters_categorical_condensed)
labs_categorical_condensed <- labs_categorical %>%
select(-V1) %>%
gather(key = "lab", value = "value", -patient_id, -lab_date) %>%
drop_na() %>%
mutate(lab_result = paste0(lab, "_", value)) %>%
group_by(patient_id, lab_date) %>%
summarise(lab_results_combined = do.call(paste, as.list(lab_result))) T%>%
ungroup() %>%
mutate(measurement_type = "lab")
labs_categorical_condensed <- labs_categorical %>%
select(-V1) %>%
gather(key = "lab", value = "value", -patient_id, -lab_date) %>%
drop_na() %>%
mutate(lab_result = paste0(lab, "_", value)) %>%
group_by(patient_id, lab_date) %>%
summarise(lab_results_combined = do.call(paste, as.list(lab_result))) %>%
ungroup() %>%
mutate(measurement_type = "lab")
colnames(labs_categorical_condensed)
labs_categorical_condensed <- labs_categorical %>%
select(-V1) %>%
gather(key = "lab", value = "value", -patient_id, -lab_date) %>%
drop_na() %>%
mutate(lab_result = paste0(lab, "_", value)) %>%
group_by(patient_id, lab_date) %>%
summarise(lab_results_combined = do.call(paste, as.list(lab_result))) %>%
ungroup() %>%
mutate(measurement_type = "lab") %>%
select(patient_id, date = lab_date,
measurement_type, results = lab_results_combined)
colnames(labs_categorical_condensed)
vitals_categorical_condensed <- vitals_categorical %>%
gather(key = "vital", value = "vitals_result", -patient_id, -vitals_date) %>%
drop_na() %>%
group_by(patient_id, vitals_date) %>%
summarise(vitals_results_combined = do.call(paste, as.list(vitals_result))) %>%
ungroup() %>%
mutate(measurement_type = "vitals") %>%
select(patient_id, date = vitals_date,
measurement_type, results = vitals_results_combined)
colnames(vitals_categorical_condensed)
colnames(diagnoses_categorical_condensed)
diagnoses_categorical_condensed <- diagnoses_categorical %>%
group_by(patient_id, diagnosis_date) %>%
summarise(diagnoses_combined = do.call(paste, as.list(icd9_groups))) %>%
ungroup() %>%
mutate(measurement_type = "diagnoses") %>%
select(patient_id, date = diagnosis_date,
measurement_type, results = diagnoses_combined)
head(diagnoses_categorical_condensed)
meds_categorical_condensed <- meds_categorical %>%
group_by(patient_id, medication_date) %>%
summarise(meds_combined = do.call(paste, as.list(medication_group))) %>%
ungroup() %>%
mutate(measurement_type = "meds") %>%
select(patient_id, date = medication_date,
measurement_type, results = meds_combined)
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
blogdown::serve_site()
blogdown::stop_server()
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
setwd("~/Google Drive/Personal webpage/personal-website-netlify")
blogdown::serve_site()
knitr::include_graphics("/img/caret/caret.png")
# load in packages
library(caret)
library(ranger)
library(tidyverse)
library(e1071)
# load in abalone dataset
abalone_data <- read.table("../data/abalone.data", sep = ",")
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "old")
# split into training and testing
set.seed(23489)
train_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
# load in abalone dataset
abalone_data <- read.table("../data/abalone.data", sep = ",")
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "old")
# split into training and testing
set.seed(23489)
train_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))
abalone_train <- abalone_data[train_index, ]
abalone_test <- abalone_data[-train_index, ]
# remove the original dataset
rm(abalone_data)
# view the first 6 rows of the training data
head(abalone_train)
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "age")
# load in abalone dataset
abalone_data <- read.table("../data/abalone.data", sep = ",")
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "age")
# split into training and testing
set.seed(23489)
train_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))
abalone_train <- abalone_data[train_index, ]
abalone_test <- abalone_data[-train_index, ]
# remove the original dataset
rm(abalone_data)
# view the first 6 rows of the training data
head(abalone_train)
dim(abalone_train)
abalone_train %>% arrange(age) %>% pull(age)
abalone_train %>% ggplot() + geom_histogram(aes(x = age))
# add a variable for "old"
abalone_data <- abalone_data %>%
mutate(old = age > 10)
# load in abalone dataset
abalone_data <- read.table("../data/abalone.data", sep = ",")
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "age")
# add a variable for "old"
abalone_data <- abalone_data %>%
mutate(old = age > 10)
# split into training and testing
set.seed(23489)
train_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))
abalone_train <- abalone_data[train_index, ]
abalone_test <- abalone_data[-train_index, ]
# remove the original dataset
rm(abalone_data)
# view the first 6 rows of the training data
head(abalone_train)
dim(abalone_train)
# fit a random forest model (using ranger)
rf_fit <- train(as.factor(old) ~ .,
data = abalone_train,
method = "ranger")
# load in abalone dataset
abalone_data <- read.table("../data/abalone.data", sep = ",")
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "age")
# add a logical variable for "old" (age > 10)
abalone_data <- abalone_data %>%
mutate(old = age > 10) %>%
# remove the "age" variable
select(-age)
# split into training and testing
set.seed(23489)
train_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))
abalone_train <- abalone_data[train_index, ]
abalone_test <- abalone_data[-train_index, ]
# remove the original dataset
rm(abalone_data)
# view the first 6 rows of the training data
head(abalone_train)
dim(abalone_train)
# fit a random forest model (using ranger)
rf_fit <- train(as.factor(old) ~ .,
data = abalone_train,
method = "ranger")
rf_fit
# predict the outcome on a test set
abalone_rf_pred <- predict(rf_fit, abalone_test)
# compare predicted outcome and true outcome
confusionMatrix(abalone_rf_pred, abalone_test$old)
abalone_test$old
abalone_rf_pred
abalone_test$old
# add a logical variable for "old" (age > 10)
abalone_data <- abalone_data %>%
mutate(old = as.factor(age > 10)) %>%
# remove the "age" variable
select(-age)
# load in abalone dataset
abalone_data <- read.table("../data/abalone.data", sep = ",")
# load in column names
colnames(abalone_data) <- c("sex", "length", "diameter", "height",
"whole.weight", "shucked.weight",
"viscera.weight", "shell.weight", "age")
# add a logical variable for "old" (age > 10)
abalone_data <- abalone_data %>%
mutate(old = as.factor(age > 10)) %>%
# remove the "age" variable
select(-age)
# split into training and testing
set.seed(23489)
train_index <- sample(1:nrow(abalone_data), 0.9 * nrow(abalone_data))
abalone_train <- abalone_data[train_index, ]
abalone_test <- abalone_data[-train_index, ]
# remove the original dataset
rm(abalone_data)
# view the first 6 rows of the training data
head(abalone_train)
abalone_rf_pred
as.logical(predict(rf_fit, abalone_test))
# predict the outcome on a test set
abalone_rf_pred <- as.logical(predict(rf_fit, abalone_test))
# compare predicted outcome and true outcome
confusionMatrix(abalone_rf_pred, abalone_test$old)
# compare predicted outcome and true outcome
confusionMatrix(abalone_rf_pred, as.factor(abalone_test$old))
as.factor(abalone_test$old)
abalone_rf_pred
# predict the outcome on a test set
abalone_rf_pred <- predict(rf_fit, abalone_test)
# compare predicted outcome and true outcome
confusionMatrix(abalone_rf_pred, as.factor(abalone_test$old))
abalone_rf_pred
as.factor(abalone_test$old)
# compare predicted outcome and true outcome
confusionMatrix(abalone_rf_pred, as.factor(abalone_test$old))
# compare predicted outcome and true outcome
confusionMatrix(abalone_rf_pred, as.factor(abalone_test$old))
# center, scale and perform a YeoJohnson transformation
# identify and remove variables with near zero variance
# perform pca
abalone_no_nzv_pca <- preProcess(select(abalone_train, - old),
method = c("center", "scale", "YeoJohnson", "nzv", "pca"))
abalone_no_nzv_pca
# identify which variables were ignored, centered, scaled, etc
abalone_no_nzv_pca$method
# identify the principal components
abalone_no_nzv_pca$rotation
# identify the indices of 10 80% subsamples of the iris data
train_index <- createDataPartition(iris$Species,
p = 0.8,
list = FALSE,
times = 10)
# add a madeup grouping variable that groupes each subsequent 5 abalone together
# filter to the first 50 abalone for simplicity
abalone_grouped <- cbind(abalone_train[1:50, ], group = rep(1:10, each = 5))
# add a madeup grouping variable that groupes each subsequent 5 abalone together
# filter to the first 50 abalone for simplicity
abalone_grouped <- cbind(abalone_train[1:50, ], group = rep(1:10, each = 5))
head(abalone_grouped, 10)
# perform grouped K means
group_folds <- groupKFold(abalone_grouped$group, k = 10)
group_folds
set.seed(998)
# create a testing and training set
in_training <- createDataPartition(abalone_train$old, p = .75, list = FALSE)
training <- abalone_train[ in_training,]
testing  <- abalone_train[-in_training,]
# specify that the resampling method is
fit_control <- trainControl(## 10-fold CV
method = "cv",
number = 10)
# run a random forest model
set.seed(825)
rf_fit <- train(as.factor(old) ~ .,
data = abalone_train,
method = "ranger",
trControl = fit_control)
rf_fit
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
setwd("~/Google Drive/Personal webpage/personal-website-netlify")
blogdown::serve_site()
blogdown::stop_server()
mtcars %>% map_dbl(mean)
library(tidyverse)
mtcars %>% map_dbl(mean)
normal_means <- c(-10, 0, 10) %>%
map_df(~(rnorm(10, .x, 1)))
tribble(~"m1", ~"m2", ~"m3",
-10, 0, 10)
normal_means <- tribble(~"m1", ~"m2", ~"m3",
-10, 0, 10) %>%
map_df(~(rnorm(10, .x, 1)))
normal_means
normal_means <- tribble(~m1, ~m2, ~m3,
-10, 0, 10) %>%
map_df(~(rnorm(10, .x, 1)))
normal_means
unique_iris <- iris %>% map_dbl(~length(unique(.x)))
unique_iris
usethis::use_course("rstd.io/wtf-startup")
