age = min(PAT_PROC_AGE),
ethnicity = unique(ETHNIC_GROUP),
race = unique(PATIENT_RACE),
# since procedures for a single encounter can span multiple
# days, take the first date
encounter_begin_date = min(PROCDATE_SET),
encounter_span_days = difftime(max(PROCDATE_SET),
min(PROCDATE_SET),
units = "days"),
standard_wound_closure = case_when(
# if at least one wounds had non-standard closure set to 0
sum(CLOSURE == "OTH") > 0 ~ FALSE,
sum(CLOSURE == "OTH") == 0 ~ TRUE),
anesthesia = case_when(
# if at least one procedure used anesthesia set to TRUE
sum(ANESTHESIA == "Y") > 0 ~ TRUE,
sum(ANESTHESIA == "Y") == 0 ~ FALSE),
# worst physical condition assessment by anesthesiologist
physical_condition_assessment_anesth = max(ASA),
emergency = case_when(
# if at least one procedure was an emergency, set to TRUE
sum(EMERGENCY == "Y") > 0 ~ TRUE,
sum(EMERGENCY == "Y") == 0 ~ FALSE),
height_cm = mean(30.48 * HTFEET + 2.54 * HTINCHES),
weight_lb = mean(WEIGHT),
outpatient = case_when(
# if OUTPATIENT is recorded as N for at least one procedure set to FALSE
sum(OUTPATIENT == "N") > 0 ~ FALSE,
sum(OUTPATIENT == "N") == 0 ~ TRUE),
# number of procedures associated with the encounter
procedures = n(),
# record the risk of the most risky procedure
risk_max = max(RISK),
surgical_wound_class =
case_when(
# if at least one procedure is dirty then set to dirty
(sum(SWCLASS == "D") > 0) ~ "dirty",
# if at least one procedure is contaminated (but none are
# dirty) set to contaminated
(sum(SWCLASS == "D") == 0) &
(sum(SWCLASS == "CO") > 0) ~ "contaminated",
# if at least one procedure is clean-contaminated (but none
# are dirty or contaminated), set to clean-contaminated
(sum(SWCLASS %in% c("D", "CO")) == 0) &
(sum(SWCLASS == "CC") > 0) ~ "clean-contaminated",
# if all procedures are clean set to clean
(sum(SWCLASS %in% c("D", "CO", "CC")) == 0) &
(sum(SWCLASS == "C") > 0) ~ "clean"),
trauma = case_when(
sum(TRAUMA == "Y") > 0 ~ TRUE,
sum(TRAUMA == "Y") == 0 ~ FALSE),
# time of longest procedure in encounter
longest_surgery_time = max(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
# total length of time in surgery across procedures in encounter
total_surgery_time = sum(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
diagnosis_code = as.factor(PRIMARY_DX)
) %>%
ungroup() %>%
# arrange in order of encounter by patient
arrange(patient_id, encounter_begin_date) %>%
group_by(patient_id) %>%
# how many encounters before this one?
mutate(prior_encounters = 1:n() - 1)
# get information from surgical encounters
covariate_df <- surgical_encounters_clean %>%
mutate(encounter_id = ADMISSION_ENCNUM) %>%
# the row unit is ENCNUM
group_by(encounter_id) %>%
summarise(patient_id = unique(PATNUM),
gender = unique(GENDER),
# note that there are around 40 patients with
# procedures on either side of a birthday
age = min(PAT_PROC_AGE),
ethnicity = unique(ETHNIC_GROUP),
race = unique(PATIENT_RACE),
# since procedures for a single encounter can span multiple
# days, take the first date
encounter_begin_date = min(PROCDATE_SET),
encounter_span_days = difftime(max(PROCDATE_SET),
min(PROCDATE_SET),
units = "days"),
standard_wound_closure = case_when(
# if at least one wounds had non-standard closure set to 0
sum(CLOSURE == "OTH") > 0 ~ FALSE,
sum(CLOSURE == "OTH") == 0 ~ TRUE),
anesthesia = case_when(
# if at least one procedure used anesthesia set to TRUE
sum(ANESTHESIA == "Y") > 0 ~ TRUE,
sum(ANESTHESIA == "Y") == 0 ~ FALSE),
# worst physical condition assessment by anesthesiologist
physical_condition_assessment_anesth = max(ASA),
emergency = case_when(
# if at least one procedure was an emergency, set to TRUE
sum(EMERGENCY == "Y") > 0 ~ TRUE,
sum(EMERGENCY == "Y") == 0 ~ FALSE),
height_cm = mean(30.48 * HTFEET + 2.54 * HTINCHES),
weight_lb = mean(WEIGHT),
outpatient = case_when(
# if OUTPATIENT is recorded as N for at least one procedure set to FALSE
sum(OUTPATIENT == "N") > 0 ~ FALSE,
sum(OUTPATIENT == "N") == 0 ~ TRUE),
# number of procedures associated with the encounter
procedures = n(),
# record the risk of the most risky procedure
risk_max = max(RISK),
surgical_wound_class =
case_when(
# if at least one procedure is dirty then set to dirty
(sum(SWCLASS == "D") > 0) ~ "dirty",
# if at least one procedure is contaminated (but none are
# dirty) set to contaminated
(sum(SWCLASS == "D") == 0) &
(sum(SWCLASS == "CO") > 0) ~ "contaminated",
# if at least one procedure is clean-contaminated (but none
# are dirty or contaminated), set to clean-contaminated
(sum(SWCLASS %in% c("D", "CO")) == 0) &
(sum(SWCLASS == "CC") > 0) ~ "clean-contaminated",
# if all procedures are clean set to clean
(sum(SWCLASS %in% c("D", "CO", "CC")) == 0) &
(sum(SWCLASS == "C") > 0) ~ "clean"),
trauma = case_when(
sum(TRAUMA == "Y") > 0 ~ TRUE,
sum(TRAUMA == "Y") == 0 ~ FALSE),
# time of longest procedure in encounter
longest_surgery_time = max(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
# total length of time in surgery across procedures in encounter
total_surgery_time = sum(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
diagnosis_code = unique(as.factor(PRIMARY_DX))
) %>%
ungroup() %>%
# arrange in order of encounter by patient
arrange(patient_id, encounter_begin_date) %>%
group_by(patient_id) %>%
# how many encounters before this one?
mutate(prior_encounters = 1:n() - 1)
head(surgical_encounters_clean)
# get information from surgical encounters
covariate_df <- surgical_encounters_clean %>%
mutate(encounter_id = ADMISSION_ENCNUM) %>%
# the row unit is ENCNUM
group_by(encounter_id) %>%
summarise(patient_id = unique(PATNUM),
gender = unique(GENDER),
# note that there are around 40 patients with
# procedures on either side of a birthday
age = min(PAT_PROC_AGE),
ethnicity = unique(ETHNIC_GROUP),
race = unique(PATIENT_RACE),
# since procedures for a single encounter can span multiple
# days, take the first date
encounter_begin_date = min(PROCDATE_SET),
encounter_span_days = difftime(max(PROCDATE_SET),
min(PROCDATE_SET),
units = "days"),
standard_wound_closure = case_when(
# if at least one wounds had non-standard closure set to 0
sum(CLOSURE == "OTH") > 0 ~ FALSE,
sum(CLOSURE == "OTH") == 0 ~ TRUE),
anesthesia = case_when(
# if at least one procedure used anesthesia set to TRUE
sum(ANESTHESIA == "Y") > 0 ~ TRUE,
sum(ANESTHESIA == "Y") == 0 ~ FALSE),
# worst physical condition assessment by anesthesiologist
physical_condition_assessment_anesth = max(ASA),
emergency = case_when(
# if at least one procedure was an emergency, set to TRUE
sum(EMERGENCY == "Y") > 0 ~ TRUE,
sum(EMERGENCY == "Y") == 0 ~ FALSE),
height_cm = mean(30.48 * HTFEET + 2.54 * HTINCHES),
weight_lb = mean(WEIGHT),
outpatient = case_when(
# if OUTPATIENT is recorded as N for at least one procedure set to FALSE
sum(OUTPATIENT == "N") > 0 ~ FALSE,
sum(OUTPATIENT == "N") == 0 ~ TRUE),
# number of procedures associated with the encounter
procedures = n(),
# record the risk of the most risky procedure
risk_max = max(RISK),
surgical_wound_class =
case_when(
# if at least one procedure is dirty then set to dirty
(sum(SWCLASS == "D") > 0) ~ "dirty",
# if at least one procedure is contaminated (but none are
# dirty) set to contaminated
(sum(SWCLASS == "D") == 0) &
(sum(SWCLASS == "CO") > 0) ~ "contaminated",
# if at least one procedure is clean-contaminated (but none
# are dirty or contaminated), set to clean-contaminated
(sum(SWCLASS %in% c("D", "CO")) == 0) &
(sum(SWCLASS == "CC") > 0) ~ "clean-contaminated",
# if all procedures are clean set to clean
(sum(SWCLASS %in% c("D", "CO", "CC")) == 0) &
(sum(SWCLASS == "C") > 0) ~ "clean"),
trauma = case_when(
sum(TRAUMA == "Y") > 0 ~ TRUE,
sum(TRAUMA == "Y") == 0 ~ FALSE),
# time of longest procedure in encounter
longest_surgery_time = max(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
# total length of time in surgery across procedures in encounter
total_surgery_time = sum(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
smoker = unique(SMOKING_STATUS))
# get information from surgical encounters
covariate_df <- surgical_encounters_clean %>%
mutate(encounter_id = ADMISSION_ENCNUM) %>%
# the row unit is ENCNUM
group_by(encounter_id) %>%
summarise(patient_id = unique(PATNUM),
gender = unique(GENDER),
# note that there are around 40 patients with
# procedures on either side of a birthday
age = min(PAT_PROC_AGE),
ethnicity = unique(ETHNIC_GROUP),
race = unique(PATIENT_RACE),
# since procedures for a single encounter can span multiple
# days, take the first date
encounter_begin_date = min(PROCDATE_SET),
encounter_span_days = difftime(max(PROCDATE_SET),
min(PROCDATE_SET),
units = "days"),
standard_wound_closure = case_when(
# if at least one wounds had non-standard closure set to 0
sum(CLOSURE == "OTH") > 0 ~ FALSE,
sum(CLOSURE == "OTH") == 0 ~ TRUE),
anesthesia = case_when(
# if at least one procedure used anesthesia set to TRUE
sum(ANESTHESIA == "Y") > 0 ~ TRUE,
sum(ANESTHESIA == "Y") == 0 ~ FALSE),
# worst physical condition assessment by anesthesiologist
physical_condition_assessment_anesth = max(ASA),
emergency = case_when(
# if at least one procedure was an emergency, set to TRUE
sum(EMERGENCY == "Y") > 0 ~ TRUE,
sum(EMERGENCY == "Y") == 0 ~ FALSE),
height_cm = mean(30.48 * HTFEET + 2.54 * HTINCHES),
weight_lb = mean(WEIGHT),
outpatient = case_when(
# if OUTPATIENT is recorded as N for at least one procedure set to FALSE
sum(OUTPATIENT == "N") > 0 ~ FALSE,
sum(OUTPATIENT == "N") == 0 ~ TRUE),
# number of procedures associated with the encounter
procedures = n(),
# record the risk of the most risky procedure
risk_max = max(RISK),
surgical_wound_class =
case_when(
# if at least one procedure is dirty then set to dirty
(sum(SWCLASS == "D") > 0) ~ "dirty",
# if at least one procedure is contaminated (but none are
# dirty) set to contaminated
(sum(SWCLASS == "D") == 0) &
(sum(SWCLASS == "CO") > 0) ~ "contaminated",
# if at least one procedure is clean-contaminated (but none
# are dirty or contaminated), set to clean-contaminated
(sum(SWCLASS %in% c("D", "CO")) == 0) &
(sum(SWCLASS == "CC") > 0) ~ "clean-contaminated",
# if all procedures are clean set to clean
(sum(SWCLASS %in% c("D", "CO", "CC")) == 0) &
(sum(SWCLASS == "C") > 0) ~ "clean"),
trauma = case_when(
sum(TRAUMA == "Y") > 0 ~ TRUE,
sum(TRAUMA == "Y") == 0 ~ FALSE),
# time of longest procedure in encounter
longest_surgery_time = max(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
# total length of time in surgery across procedures in encounter
total_surgery_time = sum(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
smoker = unique(SMOKING_STATUS)
) %>%
ungroup() %>%
# arrange in order of encounter by patient
arrange(patient_id, encounter_begin_date) %>%
group_by(patient_id) %>%
# how many encounters before this one?
mutate(prior_encounters = 1:n() - 1)
# get information from surgical encounters
covariate_df <- surgical_encounters_clean %>%
mutate(encounter_id = ADMISSION_ENCNUM) %>%
# the row unit is ENCNUM
group_by(encounter_id) %>%
summarise(patient_id = unique(PATNUM),
gender = unique(GENDER),
# note that there are around 40 patients with
# procedures on either side of a birthday
age = min(PAT_PROC_AGE),
ethnicity = unique(ETHNIC_GROUP),
race = unique(PATIENT_RACE),
# since procedures for a single encounter can span multiple
# days, take the first date
encounter_begin_date = min(PROCDATE_SET),
encounter_span_days = difftime(max(PROCDATE_SET),
min(PROCDATE_SET),
units = "days"),
standard_wound_closure = case_when(
# if at least one wounds had non-standard closure set to 0
sum(CLOSURE == "OTH") > 0 ~ FALSE,
sum(CLOSURE == "OTH") == 0 ~ TRUE),
anesthesia = case_when(
# if at least one procedure used anesthesia set to TRUE
sum(ANESTHESIA == "Y") > 0 ~ TRUE,
sum(ANESTHESIA == "Y") == 0 ~ FALSE),
# worst physical condition assessment by anesthesiologist
physical_condition_assessment_anesth = max(ASA),
emergency = case_when(
# if at least one procedure was an emergency, set to TRUE
sum(EMERGENCY == "Y") > 0 ~ TRUE,
sum(EMERGENCY == "Y") == 0 ~ FALSE),
height_cm = mean(30.48 * HTFEET + 2.54 * HTINCHES),
weight_lb = mean(WEIGHT),
outpatient = case_when(
# if OUTPATIENT is recorded as N for at least one procedure set to FALSE
sum(OUTPATIENT == "N") > 0 ~ FALSE,
sum(OUTPATIENT == "N") == 0 ~ TRUE),
# number of procedures associated with the encounter
procedures = n(),
# record the risk of the most risky procedure
risk_max = max(RISK),
surgical_wound_class =
case_when(
# if at least one procedure is dirty then set to dirty
(sum(SWCLASS == "D") > 0) ~ "dirty",
# if at least one procedure is contaminated (but none are
# dirty) set to contaminated
(sum(SWCLASS == "D") == 0) &
(sum(SWCLASS == "CO") > 0) ~ "contaminated",
# if at least one procedure is clean-contaminated (but none
# are dirty or contaminated), set to clean-contaminated
(sum(SWCLASS %in% c("D", "CO")) == 0) &
(sum(SWCLASS == "CC") > 0) ~ "clean-contaminated",
# if all procedures are clean set to clean
(sum(SWCLASS %in% c("D", "CO", "CC")) == 0) &
(sum(SWCLASS == "C") > 0) ~ "clean"),
trauma = case_when(
sum(TRAUMA == "Y") > 0 ~ TRUE,
sum(TRAUMA == "Y") == 0 ~ FALSE),
# time of longest procedure in encounter
longest_surgery_time = max(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
# total length of time in surgery across procedures in encounter
total_surgery_time = sum(difftime(OUT_OF_ROOM_SET,
IN_OP_ROOM_SET,
unit = "hours")),
smoker = unique(SMOKING_STATUS),
max_transfused_rbc = max(TOTAL_RBC_TRANSFUSED),
total_transfused_rbc = sum(TOTAL_RBC_TRANSFUSED),
max_transfused_platelets = max(TOTAL_PLATELETS_TRANSFUSED),
total_transfused_platelets = sum(TOTAL_PLATELETS_TRANSFUSED),
max_transfused_ffp = max(TOTAL_FFP_TRANSFUSED),
total_transfused_ffp = sum(TOTAL_FFP_TRANSFUSED),
max_transfused_cryo = max(TOTAL_CRYO_TRANSFUSED),
total_transfused_cryo = sum(TOTAL_CRYO_TRANSFUSED)
) %>%
ungroup() %>%
# arrange in order of encounter by patient
arrange(patient_id, encounter_begin_date) %>%
group_by(patient_id) %>%
# how many encounters before this one?
mutate(prior_encounters = 1:n() - 1) %>%
ungroup()
identical(covariate_df$max_transfused_rbc, covariate_df$total_transfused_rbc)
setwd("~/Dropbox/bookdown")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
setwd("~/Dropbox/bookdown_215a")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
setwd("~/Dropbox/bookdown_215a")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
setwd("~/Dropbox/bookdown")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
setwd("~/Google Drive/PhD/Research/UC_Davis/R/scripts")
library(readxl)
original_data_path <- "../../data/SSI cases 2014-17/"
ssi_orig <- read_xlsx(paste0(original_data_path,
"Q340954_SURG_SSI_IC_trimmed_7.13.2018.xlsx"))
ssi_orig %>% head
ssi_orig$ADMISSION_ENCNUM %in% surgical_encounters_orig$ADMISSION_ENCNUM
ssi_orig$ADMISSION_ENCNUM
surgical_encounters_orig$ADMISSION_ENCNUM
ssi_orig$ADMISSION_ENCNUM %in% surgical_encounters_orig$ADMISSION_ENCNUM
class(ssi_orig$ADMISSION_ENCNUM)
class(surgical_encounters_orig$ADMISSION_ENCNUM)
ssi_orig$ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM)
ssi_orig$ADMISSION_ENCNUM
ssi_orig$ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM)
as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM)
surgical_encounters_orig$PRIMARY_DX
surgical_encounters_orig$PRIMARY_DX %>% tail()
surgical_encounters_orig$PRIMARY_DX %>% tail(900)
setwd("~/Dropbox/bookdown")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
library(readxl)
setwd("~/Google Drive/PhD/Research/UC_Davis/R/scripts")
original_data_path <- "../../data/SSI cases 2014-17/"
ssi_orig <- read_xlsx(paste0(original_data_path,
"Q340954_SURG_SSI_IC_trimmed_7.13.2018.xlsx"))
processed_data_path <- "../../data/processed_data/01_combined_data/"
surgical_encounters_orig <- as.data.frame(fread(paste0(processed_data_path, "combined_surgical_encounters.csv")))
library(data.table)
surgical_encounters_orig <- as.data.frame(fread(paste0(processed_data_path, "combined_surgical_encounters.csv")))
ssi_orig$ADMISSION_ENCNUM %in% surgical_encounters_orig$ADMISSION_ENCNUM
ssi_orig$ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM)
ssi_orig$ADMISSION_ENCNUM[!(ssi_orig$ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM))]
ssi_orig %>%
filter(!(ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
surgical_encounters_orig %>% filter(PATNUM %in% 33081133)
surgical_encounters_orig %>% filter(PATNUM == 33081133)
surgical_encounters_orig %>% filter(PATNUM == "33081133")
surgical_encounters_orig %>% filter(PATNUM == "33116527")
surgical_encounters_orig %>% head()
surgical_encounters_orig %>% filter(PATNUM == 33116527)
surgical_encounters_orig %>% filter(as.numeric(PATNUM) == 33116527)
surgical_encounters_orig %>% filter(as.numeric(PATNUM) == as.numeric(33116527))
ssi_orig %>%
filter(!(ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
ssi_orig %>%
filter(!(PATNUM %in% as.numeric(surgical_encounters_orig$PATNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
ssi_orig$PATNUM
ssi_orig$PATNUM %in% surgical_encounters_orig$PATNUM
surgical_encounters_orig <- as.data.frame(read_csv(paste0(processed_data_path, "combined_surgical_encounters.csv")))
ssi_orig %>%
filter(!(PATNUM %in% as.numeric(surgical_encounters_orig$PATNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
processed_data_path <- "../../data/processed_data/01_combined_data/"
surgical_encounters_orig <- as.data.frame(read_csv(paste0(processed_data_path, "combined_surgical_encounters.csv")))
surgical_encounters_orig <- as.data.frame(read.csv(paste0(processed_data_path, "combined_surgical_encounters.csv")))
ssi_orig %>%
filter(!(PATNUM %in% as.numeric(surgical_encounters_orig$PATNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
setwd("~/Google Drive/PhD/Research/UC_Davis/R/exploration/01_raw-data")
# load in the SSI cases 2014-17 file
ssi <- readxl::read_xlsx("../../../data/SSI cases 2014-17/Q340954_SURG_SSI_IC_trimmed_7.13.2018.xlsx")
ssi <- ssi %>%
mutate(date = dmy_hms(PROCEDURE_DATE_SET),
year = year(date))
library(lubridate)
ssi <- ssi %>%
mutate(date = dmy_hms(PROCEDURE_DATE_SET),
year = year(date))
# load in al surgical data files: all years
combined_data_path <- "../../../data/processed_data/01_combined_data/"
surgical_encounters <- fread(paste0(combined_data_path,
"combined_surgical_encounters.csv")) %>%
as.data.frame
# identifyi patients with SSI that are not included in surgical encounters
ssi %>% filter(year(date) >= 2014,
!(PATNUM %in% surgical_encounters$PATNUM)) %>%
select(PATNUM) %>%
kable
ssi$PATNUM %in% surgical_encounters$PATNUM
ssi_orig %>% filter(year(mdy_hms(PROCEDURE_DATE_SET)) >= 2014) %>%
filter(!(ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
ssi_orig %>% filter(year(dmy_hms(PROCEDURE_DATE_SET)) >= 2014) %>%
filter(!(ADMISSION_ENCNUM %in% as.numeric(surgical_encounters_orig$ADMISSION_ENCNUM))) %>%
select(PATNUM, ADMISSION_ENCNUM)
ssi_orig %>% filter(year(dmy_hms(PROCEDURE_DATE_SET)) >= 2014) %>%
filter(!(LINKED_PROCEDURE %in% as.numeric(surgical_encounters_orig$PROCID))) %>%
select(PATNUM, ADMISSION_ENCNUM)
surgical_encounters_orig$SURGEON_CODE %>% unique %>% length
surgical_encounters_orig$SURGEON_CODE %>% count
surgical_encounters_orig %>% count(SURGEON_CODE) %>% arrange(desc(n))
surgical_encounters_orig %>% count(SURGEON_CODE) %>% arrange(desc(n)) %>% as.data.frame()
setwd("~/Dropbox/bookdown_215a")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
setwd("~/Dropbox/bookdown_215a")
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
blogdown::serve_site()
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content")
setwd("~/Google Drive/Personal webpage/personal-website-netlify")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
