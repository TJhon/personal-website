# randomly decide if 0, 2, or 3 values will be missing from each column
n_missing <- sample(0:3, 8, replace = TRUE)
# replace n_missing randomly selected values from each column with NA
x[sample(1:20, n_missing)] <- NA
return(x)
})
muffin_cupcake_data
# Chunk 5
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + tasty,
data = muffin_cupcake_data)
# Chunk 6
summary(model_recipe)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_zv(all_predictors()) %>%
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_poweder) %>%
step_dummy(vars(additional_ingredients))
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
# Chunk 1
knitr::include_graphics("/img/recipes/hadley_cupcakes.jpg")
# Chunk 2
# load useful libraries
library(tidyverse)
library(tidymodels) # this loads the recipes pacakge
# load in the data
muffin_cupcake_data_orig <- read_csv("https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv")
# look at data
muffin_cupcake_data_orig
# Chunk 3
muffin_cupcake_data <- muffin_cupcake_data_orig %>%
# rename all columns
rename_all(function(.name) {
.name %>%
# replace all names with the lowercase versions
tolower %>%
# replace all spaces with underscores
str_replace(" ", "_")
})
# check that this did what I wanted
muffin_cupcake_data
# Chunk 4
# add an additional ingredients column that is categorical
muffin_cupcake_data <- muffin_cupcake_data %>%
mutate(additional_ingredients = c("fruit",
"fruit",
"none",
"nuts",
"fruit",
"fruit",
"nuts",
"none",
"none",
"nuts",
"icing",
"icing",
"fruit",
"none",
"fruit",
"icing",
"none",
"fruit",
"icing",
"icing"))
# add some random missing values here and there just for fun
set.seed(26738)
muffin_cupcake_data <- muffin_cupcake_data %>%
# only add missing values to numeric columns
mutate_if(is.numeric,
function(x) {
# randomly decide if 0, 2, or 3 values will be missing from each column
n_missing <- sample(0:3, 8, replace = TRUE)
# replace n_missing randomly selected values from each column with NA
x[sample(1:20, n_missing)] <- NA
return(x)
})
muffin_cupcake_data
# Chunk 5
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + tasty,
data = muffin_cupcake_data)
# Chunk 6
summary(model_recipe)
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_data)
summary(model_recipe)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_zv(all_predictors()) %>%
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_poweder) %>%
step_dummy(vars(additional_ingredients))
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_zv(all_predictors()) %>%
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
step_dummy(vars(additional_ingredients))
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_zv(all_predictors()) %>%
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
step_dummy(additional_ingredients)
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
prepped_recipe
bake(prepped_recipe, muffin_cupcake_data)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_zv() %>%
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
step_dummy(additional_ingredients)
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
bake(prepped_recipe, muffin_cupcake_data)
?step_zv
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_zv(all_predictors())
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
bake(prepped_recipe, muffin_cupcake_data)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_nzv(all_predictors())
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
bake(prepped_recipe, muffin_cupcake_data)
?step_nzv
iris2 <- iris
iris2$Species <- as.numeric(iris2$Species)
rec <- recipe(~ ., data = iris2)
make_factor <- rec %>% step_num2factor(Species)
make_factor <- prep(make_factor,
training = iris2,
retain = TRUE)
# note that `diet` is a factor
juice(make_factor) %>% head
okc %>% head
tidy(make_factor, number = 1)
# When novel values are exposed
with_transform <- rec %>%
step_num2factor(Species, transform = function(x) paste0("val_", x))
with_transform <- prep(with_transform,
training = iris2[1:75,])
new_values <- bake(with_transform, new_data = iris2, Species)
install.packages("recipes")
install.packages("recipes")
install.packages("recipes")
install.packages("recipes")
update.packages("recipes")
# look at data
muffin_cupcake_data_orig
# Chunk 1
knitr::include_graphics("/img/recipes/hadley_cupcakes.jpg")
# Chunk 2
# load useful libraries
library(tidyverse)
library(recipes) # could also load the tidymodels package
# load in the data
muffin_cupcake_data_orig <- read_csv("https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv")
# look at data
muffin_cupcake_data_orig
# Chunk 3
muffin_cupcake_data <- muffin_cupcake_data_orig %>%
# rename all columns
rename_all(function(.name) {
.name %>%
# replace all names with the lowercase versions
tolower %>%
# replace all spaces with underscores
str_replace(" ", "_")
})
# check that this did what I wanted
muffin_cupcake_data
# Chunk 4
# add an additional ingredients column that is categorical
muffin_cupcake_data <- muffin_cupcake_data %>%
mutate(additional_ingredients = c("fruit",
"fruit",
"none",
"nuts",
"fruit",
"fruit",
"nuts",
"none",
"none",
"nuts",
"icing",
"icing",
"fruit",
"none",
"fruit",
"icing",
"none",
"fruit",
"icing",
"icing"))
# add some random missing values here and there just for fun
set.seed(26738)
muffin_cupcake_data <- muffin_cupcake_data %>%
# only add missing values to numeric columns
mutate_if(is.numeric,
function(x) {
# randomly decide if 0, 2, or 3 values will be missing from each column
n_missing <- sample(0:3, 8, replace = TRUE)
# replace n_missing randomly selected values from each column with NA
x[sample(1:20, n_missing)] <- NA
return(x)
})
muffin_cupcake_data
# Chunk 5
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_data)
# Chunk 6
summary(model_recipe)
# Chunk 7
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_nzv(all_predictors())
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
step_dummy(additional_ingredients)
# Chunk 8
model_recipe_steps
# Chunk 9
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
# Chunk 10
bake(prepped_recipe, muffin_cupcake_data)
blogdown::serve_site()
# load useful libraries
library(tidyverse)
library(recipes) # could also load the tidymodels package
# load in the data
muffin_cupcake_data_orig <- read_csv("https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv")
# look at data
muffin_cupcake_data_orig
muffin_cupcake_data <- muffin_cupcake_data_orig %>%
# rename all columns
rename_all(function(.name) {
.name %>%
# replace all names with the lowercase versions
tolower %>%
# replace all spaces with underscores
str_replace(" ", "_")
})
# check that this did what I wanted
muffin_cupcake_data
# add an additional ingredients column that is categorical
muffin_cupcake_data <- muffin_cupcake_data %>%
mutate(additional_ingredients = c("fruit",
"fruit",
"none",
"nuts",
"fruit",
"fruit",
"nuts",
"none",
"none",
"nuts",
"icing",
"icing",
"fruit",
"none",
"fruit",
"icing",
"none",
"fruit",
"icing",
"icing"))
# add some random missing values here and there just for fun
set.seed(26738)
muffin_cupcake_data <- muffin_cupcake_data %>%
# only add missing values to numeric columns
mutate_if(is.numeric,
function(x) {
# randomly decide if 0, 2, or 3 values will be missing from each column
n_missing <- sample(0:3, 8, replace = TRUE)
# replace n_missing randomly selected values from each column with NA
x[sample(1:20, n_missing)] <- NA
return(x)
})
muffin_cupcake_data
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_data)
summary(model_recipe)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_nzv(all_predictors())
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_nzv(all_predictors()) %>%
step_meanimpute(all_numeric()) %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
step_dummy(additional_ingredients)
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
bake(prepped_recipe, muffin_cupcake_data)
muffin_cupcake_data
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
step_nzv(all_predictors()) %>%
step_meanimpute(all_numeric()) %>%
step_dummy(additional_ingredients)
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_data)
bake(prepped_recipe, muffin_cupcake_data)
blogdown::serve_site()
muffin_cupcake_train <- muffin_cupcake_data %>%
mutate(id = 1:n()) %>%
sample_frac(0.8)
blogdown::stop_server()
muffin_cupcake_train <- muffin_cupcake_data %>%
mutate(id = 1:n()) %>%
sample_frac(0.8)
train_index <- sample(1:nrow(muffin_cupcake_data), 0.8 * nrow(muffin_cupcake_data))
train_index
0.8 * nrow(muffin_cupcake_data)
library(rsample)
muffin_cupcake_split <- initial_split(muffin_cupcake_data)
muffin_cupcake_split
?initial_split
muffin_cupcake_split <- initial_split(muffin_cupcake_data, prop = 0.8)
muffin_cupcake_split
muffin_cupcake_train <- training(muffin_cupcake_split)
muffin_cupcake_test <- testing(muffin_cupcake_split)
muffin_cupcake_train
muffin_cupcake_test
.8 * 20
muffin_cupcake_split
muffin_cupcake_split <- initial_split(muffin_cupcake_data, prop = 0.79)
muffin_cupcake_train <- training(muffin_cupcake_split)
muffin_cupcake_test <- testing(muffin_cupcake_split)
muffin_cupcake_split
muffin_cupcake_split <- initial_split(muffin_cupcake_data)
muffin_cupcake_train <- training(muffin_cupcake_split)
muffin_cupcake_test <- testing(muffin_cupcake_split)
muffin_cupcake_split
muffin_cupcake_train <- training(muffin_cupcake_split)
muffin_cupcake_test <- testing(muffin_cupcake_split)
muffin_cupcake_train
muffin_cupcake_test
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_data)
summary(model_recipe)
rm(muffin_cupcake_data)
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_train)
blogdown::serve_site()
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
# mean impute numeric variables
step_meanimpute(all_numeric()) %>%
# remove predictor variables that are almost the same for every entry
step_nzv(all_predictors()) %>%
# convert the additional ingredients variable to dummy variables
step_dummy(additional_ingredients) %>%
# rescale all numeric variables except for vanilla, salt and baking powder to lie between 0 and 1
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
```
blogdown::serve_site()
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_train)
blogdown::stop_server
blogdown::stop_server()
# Chunk 1
knitr::include_graphics("/img/recipes/hadley_cupcakes.jpg")
# Chunk 2
# load useful libraries
library(tidyverse)
library(gt)
library(recipes) # could also load the tidymodels package
# load in the data
muffin_cupcake_data_orig <- read_csv("https://raw.githubusercontent.com/adashofdata/muffin-cupcake/master/recipes_muffins_cupcakes.csv")
# look at data
gt(muffin_cupcake_data_orig)
# Chunk 3
muffin_cupcake_data <- muffin_cupcake_data_orig %>%
# rename all columns
rename_all(function(.name) {
.name %>%
# replace all names with the lowercase versions
tolower %>%
# replace all spaces with underscores
str_replace(" ", "_")
})
# check that this did what I wanted
muffin_cupcake_data
# Chunk 4
# add an additional ingredients column that is categorical
muffin_cupcake_data <- muffin_cupcake_data %>%
mutate(additional_ingredients = c("fruit",
"fruit",
"none",
"nuts",
"fruit",
"fruit",
"nuts",
"none",
"none",
"nuts",
"icing",
"icing",
"fruit",
"none",
"fruit",
"icing",
"none",
"fruit",
"icing",
"icing"))
# add some random missing values here and there just for fun
set.seed(26738)
muffin_cupcake_data <- muffin_cupcake_data %>%
# only add missing values to numeric columns
mutate_if(is.numeric,
function(x) {
# randomly decide if 0, 2, or 3 values will be missing from each column
n_missing <- sample(0:3, 8, replace = TRUE)
# replace n_missing randomly selected values from each column with NA
x[sample(1:20, n_missing)] <- NA
return(x)
})
gt(muffin_cupcake_data)
# Chunk 5
library(rsample)
muffin_cupcake_split <- initial_split(muffin_cupcake_data)
muffin_cupcake_train <- training(muffin_cupcake_split)
muffin_cupcake_test <- testing(muffin_cupcake_split)
rm(muffin_cupcake_data)
# Chunk 6
gt(muffin_cupcake_train)
# Chunk 7
gt(muffin_cupcake_test)
# Chunk 8
# define the recipe (it looks a lot like applying the lm function)
model_recipe <- recipe(type ~ flour + milk + sugar + butter + egg +
baking_powder + vanilla + salt + additional_ingredients,
data = muffin_cupcake_train)
# Chunk 9
summary(model_recipe)
# define the steps we want to apply
model_recipe_steps <- model_recipe %>%
# mean impute numeric variables
step_meanimpute(all_numeric()) %>%
# convert the additional ingredients variable to dummy variables
step_dummy(additional_ingredients) %>%
# rescale all numeric variables except for vanilla, salt and baking powder to lie between 0 and 1
step_range(all_numeric(), min = 0, max = 1, -vanilla, -salt, -baking_powder) %>%
# remove predictor variables that are almost the same for every entry
step_nzv(all_predictors())
model_recipe_steps
prepped_recipe <- prep(model_recipe_steps, training = muffin_cupcake_train)
prepped_recipe
bake(prepped_recipe, muffin_cupcake_train) %>%
gt
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
fmt_number(everything(), decimals = 2)
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
fmt_number(all_numeric(), decimals = 2)
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
gt::fmt_number(all_numeric(), decimals = 2)
bake(prepped_recipe, muffin_cupcake_train)
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
fmt_number(decimals = 2)
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
fmt_number(is.numeric(), decimals = 2)
?fmt_number
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
fmt_number(vars(all_numeric()), decimals = 2)
bake(prepped_recipe, muffin_cupcake_train) %>%
gt
bake(prepped_recipe, muffin_cupcake_train) %>%
gt %>%
fmt_number(vars(flour, milk, sugar, butter, egg, vanilla), decimals = 2)
muffin_cupcake_test_preprocessed <- bake(prepped_recipe, muffin_cupcake_test)
# put it in a nice table
muffin_cupcake_test_preprocessed %>%
gt %>%
fmt_number(vars(flour, milk, sugar, butter, egg, vanilla), decimals = 2)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
