library(tidyverse)
library(forcats)
grades <- read.csv("student_midterm.csv")
grades
grades
ggplot(grades) + geom_histogram(aes(x = midterm))
library(tidyverse)
library(forcats)
grades <- read.csv("student_midterm.csv")
ggplot(grades) + geom_histogram(aes(x = midterm))
grades <- grades %>%
mutate(midterm_letter_grade = case_when(midterm > 52 ~ "A+",
midterm > 48 & midterm <= 52 ~ "A",
midterm > 44 & midterm <= 48 ~ "A-",
midterm > 39 & midterm <= 44 ~ "B+",
midterm > 35 & midterm <= 39 ~ "B",
midterm > 29 & midterm <= 35 ~ "B-"))
ggplot(grades) + geom_histogram(aes(x = midterm, col = midterm_letter_grade))
ggplot(grades) + geom_histogram(aes(x = midterm, fill = midterm_letter_grade))
grades <- grades %>%
mutate(midterm_letter_grade = case_when(midterm > 52 ~ "A+",
midterm > 48 & midterm <= 52 ~ "A",
midterm > 44 & midterm <= 48 ~ "A-",
midterm > 42 & midterm <= 44 ~ "B+",
midterm > 35 & midterm <= 42 ~ "B",
midterm > 29 & midterm <= 35 ~ "B-"))
ggplot(grades) + geom_histogram(aes(x = midterm, fill = midterm_letter_grade))
grades <- grades %>%
mutate(midterm_letter_grade = case_when(midterm > 52 ~ "A+",
midterm > 48 & midterm <= 52 ~ "A",
midterm > 45 & midterm <= 48 ~ "A-",
midterm > 42 & midterm <= 45 ~ "B+",
midterm > 35 & midterm <= 42 ~ "B",
midterm > 29 & midterm <= 35 ~ "B-"))
ggplot(grades) + geom_histogram(aes(x = midterm, fill = midterm_letter_grade))
table(grades$midterm_letter_grade)
grades <- grades %>%
mutate(midterm_letter_grade = case_when(midterm > 52 ~ "A+",
midterm > 48 & midterm <= 52 ~ "A",
midterm > 45 & midterm <= 48 ~ "A-",
midterm > 42 & midterm <= 45 ~ "B+",
midterm > 35 & midterm <= 42 ~ "B",
midterm > 29 & midterm <= 35 ~ "B-"),
midterm_letter_grade = fct_relevel(midterm_letter_grade,
c("A+", "A", "A-", "B+", "B", "B-")))
ggplot(grades) + geom_histogram(aes(x = midterm, fill = midterm_letter_grade))
table(grades$midterm_letter_grade)
grades %>% arrange(desc(midterm))
table(grades$midterm_letter_grade)
grades <- read.csv("student_midterm.csv")
ggplot(grades) + geom_histogram(aes(x = midterm))
grades <- grades %>%
mutate(midterm_letter_grade = case_when(midterm > 52 ~ "A+",
midterm > 48 & midterm <= 52 ~ "A",
midterm > 45 & midterm <= 48 ~ "A-",
midterm > 42 & midterm <= 45 ~ "B+",
midterm > 35 & midterm <= 42 ~ "B",
midterm > 29 & midterm <= 35 ~ "B-"),
midterm_letter_grade = fct_relevel(midterm_letter_grade,
c("A+", "A", "A-", "B+", "B", "B-")))
ggplot(grades) + geom_histogram(aes(x = midterm, fill = midterm_letter_grade))
table(grades$midterm_letter_grade)
grades
write.csv(grades, "midterm_letter.csv")
studentids <- grades %>% pull(SID)
studentids <- grades %>% pull(name)
studentid <- studentids[1]
student_grade <- grades %>% filter(name == name) %>%
select(name,
midterm = midterm_total, midterm_letter_grade = midterm_letter_grade)
student_grade <- grades %>% filter(name == name) %>%
select(name,
midterm, midterm_letter_grade)
student_grade
student_info <- read.csv("student_lab3.csv") %>% select(name, SID, github_repo)
student_info <- read.csv("../lab3/student_lab3.csv") %>% select(name, SID, github_repo)
student_info <- read.csv("../lab3/student_lab3.csv") %>% select(name, SID, github_name)
student_info
grades <- left_join(grades, student_info, by = "name")
student_grade <- grades %>% filter(name == name) %>%
select(name,
midterm, midterm_letter_grade)
student_grade
student_grade <- grades %>% filter(SID == studentid) %>%
select(name,
midterm, midterm_letter_grade)
student_grade
studentids <- grades %>% pull(SID)
studentid <- studentids[3]
student_grade <- grades %>% filter(SID == studentid) %>%
select(name,
midterm, midterm_letter_grade)
student_grade
student_grade <- grades %>% filter(SID == studentid) %>%
select(name, SID, github_name,
midterm, midterm_letter_grade)
student_grade
write.csv(student_grade,
file = paste0("../../student_repos/", student_grade$github_name,
"-stat215a/midterm_grade/midterm_grade.csv"))
studentids <- grades %>% pull(SID)
for (studentid in studentids) {
# extract their grade
student_grade <- grades %>% filter(SID == studentid) %>%
select(name, SID, github_name,
midterm, midterm_letter_grade)
# save grade to a csv file in the repo
write.csv(student_grade,
file = paste0("../../student_repos/", student_grade$github_name,
"-stat215a/midterm_grade/midterm_grade.csv"))
}
iris[,1:4] %>%
dist() %>%
as.matrix %>%
superheat
library(superheat)
iris[,1:4] %>%
dist() %>%
as.matrix %>%
superheat
p <- ggplot(iris) + geom_point(aes(x = Sepal.Width, y = Petal.Width))
ggsave(p, "plot.png")
ggsave("plot.png", p)
setwd("~/Google Drive/PhD/Teaching/STAT215A/student_grades")
library(tidyverse)
library(forcats)
grades <- read.csv("student_grades.csv")
midterm <- read.csv("midterm/student_midterm.csv")
midterm <- midterm %>%
select(midterm = midterm_total, midterm_max, midterm_letter_grade)
midterm <- midterm %>%
select(midterm = midterm, midterm_max, midterm_letter_grade)
midterm
midterm <- read.csv("midterm/midterm_letter.csv")
midterm
midterm <- read.csv("midterm/midterm_letter.csv")
midterm <- midterm %>%
select(midterm = midterm, midterm_max, midterm_letter_grade)
midterm <- midterm %>%
select(name, midterm = midterm, midterm_max, midterm_letter_grade)
midterm <- read.csv("midterm/midterm_letter.csv")
midterm <- midterm %>%
select(name, midterm = midterm, midterm_max, midterm_letter_grade)
midterm
grades <- left_join(grades, midterm, by = "name")
grades
grades <- read.csv("student_grades.csv")
midterm <- read.csv("midterm/midterm_letter.csv")
midterm <- midterm %>%
select(name, midterm = midterm, midterm_max, midterm_letter_grade)
grades <- left_join(grades, midterm, by = "name")
write.csv(grades, "student_grades.csv")
setwd("~/Google Drive/PhD/Teaching/STAT215A/student_grades/lab3")
library(Rcpp)
source("../../student_repos/alandong93-stat215a/lab3-3031894282/functions/sim_dist.R"
sourceCpp("../../student_repos/alandong93-stat215a/lab3-3031894282/functions/sim.cpp")
# 0.7149407 for correlation
calc_corr_from_labelings_r(test1, test2)
ComputeCorrelationSimilarityCxx(test1, test2)
source("../../student_repos/alandong93-stat215a/lab3-3031894282/functions/sim_dist.R")
sourceCpp("../../student_repos/alandong93-stat215a/lab3-3031894282/functions/sim.cpp")
simCPP(test1, test2)
set.seed(2364789)
test1 <- sample(1:5, size = 5000, replace = TRUE)
test2 <- test1
test2[sample(1:5000, 1000)] <- sample(1:5, size = 1000, replace = TRUE)
simCPP(test1, test2)
sim_dist(test1, test2)
4 + 3 + 1 + 3 + 2 + 1 + 1 + 1 + 1 + 2 + 2 + 2
4 + 3 + 1 + 3 + 3 + 1 + 1 + 2 + 1 + 2 + 2 + 2
source("../../student_repos/amyko-stat215a/lab3-24978168/code/kmeans.R")
sourceCpp("../../student_repos/amyko-stat215a/lab3-24978168/code/correlation.cpp")
# R function for computing the correlation
correlationR <- function(x, y){
# Compute the correlation measure for x and y
# Args:
#   x : integer vector, cluster assignment for sample 1
#   y : integer vector, cluster assignment for sample 2
# NOTE: For each row i, x[i] and y[i] must correspond to the same individual
# Returns:
#   corr: double, correlation
# length of x
n = length(x)
# return error if length of x does not equal length of y
if(n != length(y))
return(NULL)
# initialize dot product values
l1_l1 = 0
l2_l2 = 0
l1_l2 = 0
# Compute <L1, L1>, <L2, L2>, <L1, L2> described in Ben-Hur
# Compute the dot products by iterating through each (i,j)
for(i in 1:n){
for(j in i+1:n){
# break loop if index j is out of bounds
if(j > n) break()
# compute C_ij for x and for y
# C_ij = 1 if i and j are in the same cluster; 0 otherwise
c1_ij <- if(x[i] == x[j]) 1 else 0
c2_ij <- if(y[i] == y[j]) 1 else 0
# update dot products
l1_l1 <- l1_l1 + c1_ij * c1_ij
l2_l2 <- l2_l2 + c2_ij * c2_ij
l1_l2 <- l1_l2 + c1_ij * c2_ij
}
}
# return correlation
return(l1_l2 / (sqrt(l1_l1) * sqrt(l2_l2)))
}
correlationR(test1, test2)
sourceCpp("../../student_repos/amyko-stat215a/lab3-24978168/code/correlation.cpp")
correlationCPP(test1, test2)
5 + 3 + 3 + 3 + 2 + 2 + 2 + 2 + 2 + 3 + 3 + 3
similarity_R <- function(L1_com, L2_com){
#Initialize the values
#All points are in the same cluster are themselves
N11 <- length(L2_com)
N10 <- N01 <- 0
#Loop over all possible pairs of points
#This is less efficient than matrix computation but this way
#we do not store the similarity matrix
#Since the similarity matrix is symetric, we only need to loop
#Over the upper part
for (i in 1:(length(L1_com)-1)){
for (j in (i+1):length(L1_com)){
#Increase N11 by 2 if points cluster together in L1 and L2
N11 <- N11 + 2*(L1_com[i] == L1_com[j]) * (L2_com[i] == L2_com[j])
#Increase N01 by 2 if points cluster together in L2 and not L1
N01 <- N01 + 2*(L1_com[i] != L1_com[j]) * (L2_com[i] == L2_com[j])
#Increase N10 by 2 if points cluster together in L1 and not L2
N10 <- N10 + 2*(L1_com[i] == L1_com[j]) * (L2_com[i] != L2_com[j])
}
}
#Return the Jaccard Coefficient
return(as.numeric(N11/ (N11 + N10 + N01)))
}
sourceCpp("../../student_repos/HectorRDB-stat215a/lab3-3032134691/extra/Rcpp_demo.cpp")
similarity_cpp(test1, test2)
similarity_R(test1, test2)
4 + 3 + 3 + 3 + 2 + 1 + 2 + 2 + 1 + 2 + 2 + 2
source("../../student_repos/NYangBerkeley-stat215a/lab3-25950520/R/clustering.R")
sourceCpp("../../student_repos/NYangBerkeley-stat215a/lab3-25950520/R/similarity.cpp")
similarityCpp(test1, test2)
similarityCPP(test1, test2)
similarity_R(data.frame(test1, test2))
similarityCPP(data.frame(test1, test2))
similarityCPP(matrix(c(test1, test2), byrow = FALSE))
matrix(c(test1, test2), byrow = FALSE)
similarityCPP(matrix(c(test1, test2), ncol = 2, byrow = FALSE))
5 + 3 + 3 + 3 + 2 + 2 + 2 + 2 + 2 + 3 + 3 + 3
3 + 1 + 1 + 3 + 1 + 1 + 1 + 1 + 2 + 1 + 2 + 1
sourceCpp("../../student_repos/jorpro-stat215a/lab3-3032128958/code/cor.cpp")
library(Rcpp)
source("../../student_repos/NYangBerkeley-stat215a/lab3-25950520/R/clustering.R")
set.seed(2364789)
test1 <- sample(1:5, size = 5000, replace = TRUE)
test2 <- test1
test2[sample(1:5000, 1000)] <- sample(1:5, size = 1000, replace = TRUE)
library(Rcpp)
source("../../student_repos/jorpro-stat215a/lab3-3032128958/code/lab3_code.R")
corr.sim1 <- function(l1, l2){
C <- table(l1, l2)
corr <- sum(C^2) / sqrt(sum(rowSums(C)^2)) /
sqrt(sum(colSums(C)^2))
return(corr)
}
corr.sim1(test1, test2)
corRcpp(test1, test2)
sourceCpp("../../student_repos/jorpro-stat215a/lab3-3032128958/code/cor.cpp")
set.seed(2364789)
test1 <- sample(1:5, size = 5000, replace = TRUE)
test2 <- test1
test2[sample(1:5000, 1000)] <- sample(1:5, size = 1000, replace = TRUE)
corr.sim1(test1, test2)
corRcpp(test1, test2)
corRcpp(test1, test2, 3)
corr.sim2.cpp <- function(l1, l2, l){
cor <- corRcpp(l1, l2, l)
return(cor)
}
corr.sim2.cpp(test1, test2, 3)
corr.sim1.cpp <- function(l1, l2, l){
C <- tableCPP(l1, l2, l)
corr <- sum(C^2) / sqrt(sum(rowSums(C)^2)) /
sqrt(sum(colSums(C)^2))
return(corr)
}
corr.sim1.cpp(test1, test2, 3)
sourceCpp("../../student_repos/jorpro-stat215a/lab3-3032128958/code/table.cpp")
corr.sim1.cpp(test1, test2, 3)
set.seed(2364789)
test1 <- sample(1:5, size = 5000, replace = TRUE)
test2 <- test1
test2[sample(1:5000, 1000)] <- sample(1:5, size = 1000, replace = TRUE)
corr.sim1(test1, test2)
corr.sim1.cpp(test1, test2, 3)
JaccardCoefficient <- function(df){
names(df) <- c("ID", "sub1","sub2")  # changing column names for clarity
c.matrix1 <- outer(df$sub1, df$sub1, `==`) * 1  # preparing c matrices
c.matrix2 <- outer(df$sub2, df$sub2, `==`) * 1  # mult. by 1 to not have T/F
diag(c.matrix1) <- 0  # following inequality (i=j: 0)
diag(c.matrix2) <- 0
n11 <- table(c.matrix1[c.matrix2 == 1] == 1)[2] # preparing values
n10 <- table(c.matrix1[c.matrix2 == 0] == 1)[2]
n01 <- table(c.matrix1[c.matrix2 == 1] == 0)[2]
similarity <- as.numeric(n11 / (n11 + n10 + n01)) # final calculation
return(similarity)
}
sourceCpp("../../student_repos/rneuhausler-stat215a/lab3-23529510/jaccard_coefficient.cpp")
JaccardCoefficient(test1, test2)
JaccardCoefficient(data.frame(test1, test2))
sourceCpp("../../student_repos/rneuhausler-stat215a/lab3-23529510/jaccard_coefficient.cpp")
JaccardIndex(test1, test2, 3)
JaccardIndex(test1, test2)
JaccardCoefficient(data.frame(id = 1:length(test), test1, test2))
JaccardCoefficient(data.frame(id = 1:length(test1), test1, test2))
JaccardCoefficient(data.frame(id = 1:length(test1), test1, test2))
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content")
setwd("~/Google Drive/Personal webpage/personal-website-netlify")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
library(caret)
groupKFolds(iris$Species, k  = 3)
update.packages(oldPkgs="caret", ask=FALSE)
?trainControl
?train
?groupKFold
?trainControl
?train
?trainControl
?varImp
?preProcess
