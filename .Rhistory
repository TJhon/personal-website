activity = activity) %>%
ggplot() +
geom_point(aes(x = pc1, y = pc3, shape = activity_type, col = activity), alpha = 0.5) +
scale_color_manual(values = activity_palette) +
theme_classic(base_size = 14) +
theme(text = element_text(family = "Avenir"),
legend.position = "none",
axis.line = element_line(color = "grey60"),
axis.ticks = element_line(color = "grey70"),
axis.text = element_text(color = "grey40"),
axis.title = element_text(color = "grey40"))
gg23 <- pc.df.full %>%
as.data.frame %>%
mutate(activity_type = activity_type,
activity = activity) %>%
ggplot() +
geom_point(aes(x = pc2, y = pc3, shape = activity_type, col = activity), alpha = 0.5) +
scale_color_manual(values = activity_palette) +
theme_classic(base_size = 14) +
theme(text = element_text(family = "Avenir"),
legend.position = "none",
axis.line = element_line(color = "grey60"),
axis.ticks = element_line(color = "grey70"),
axis.text = element_text(color = "grey40"),
axis.title = element_text(color = "grey40"))
library(cowplot)
gg_legend <- pc.df.full %>%
as.data.frame %>%
mutate(activity = activity,
activity_type = activity_type) %>%
ggplot() +
geom_point(aes(x = pc3, y = pc4, col = activity), alpha = 0.5) +
scale_color_manual(values = activity_palette) +
theme_classic(base_size = 18) +
theme(text = element_text(family = "Avenir")) +
guides(colour = guide_legend(override.aes = list(size=6,
shape = c(16, 16, 16, 17, 17, 17)),
ncol = 2))
gg_legend <- get_legend(gg_legend)
gridExtra::grid.arrange(gg12, gg_legend,
gg13, gg23, ncol = 2)
# Chunk 14: projection
knitr::include_graphics("Figures-External/pca/projection.png")
# Chunk 15: pca-projections-plot
knitr::include_graphics("Figures-External/pca/pc1_projection.png")
knitr::include_graphics("Figures-External/pca/pc2_projection.png")
# Chunk 17: scree
# data frame for scree plot
pc.df <- data.frame(eigenvalues = pca.full$values,
PC = 1:length(pca.full$values))
# plot PC index vs eigenvalues
pc.df %>% filter(PC < 30) %>%
ggplot() +
geom_bar(aes(x = PC, y = eigenvalues), stat = "identity",
fill = "grey50") +
theme_classic() +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = 1:30, expand = c(0, 0)) +
theme(text = element_text(family = "Avenir", color = "grey20"),
axis.line = element_blank(),
axis.ticks.x = element_blank())
# Chunk 18: pc12
pc.df.full %>%
as.data.frame %>%
mutate(activity_type = activity_type,
activity = activity) %>%
ggplot() +
geom_point(aes(x = pc1, y = pc2, shape = activity_type, col = activity), alpha = 0.5) +
scale_color_manual(values = activity_palette) +
scale_shape_discrete(guide = "none") +
theme_classic(base_size = 14) +
theme(text = element_text(family = "Avenir"),
legend.position = "none",
axis.line = element_line(color = "grey60"),
axis.ticks = element_line(color = "grey70"),
axis.text = element_text(color = "grey40"),
axis.title = element_text(color = "grey40")) +
theme_classic(base_size = 18) +
theme(text = element_text(family = "Avenir")) +
guides(colour = guide_legend(override.aes = list(size=6,
shape = c(16, 16, 16, 17, 17, 17)),
ncol = 2))
# Chunk 19: pca-loadings
index <- 1
# extract the loadings for the PC
pc <- pca.full$vectors[, index]
# identify the order of the loadings for the first PC
pc.loading.df <- data.frame(variable = colnames(X), loading = round(pc, 3)) %>%
arrange(desc(abs(loading)))
colnames(pc.loading.df) <- c("Variable", "Loading on PC1 (fist eigenvector)")
# print the 10 variables with the highest loadings for the first PC
knitr::kable(head(pc.loading.df, 10))
# Chunk 21
pca_data <- as.matrix(scale(X, scale = F)) %*% pca.full$vectors
colnames(pca_data) <- paste0("pc", 1:ncol(pca_data))
pca_data <- as.data.frame(pca_data)
pca_data$subject <- unlist(subject.id)
pca_data$activity <- activity
set.seed(467822)
pca_data %>%
group_by(subject, activity) %>%
filter(subject %in% c(1, 3)) %>%
sample_n(2) %>%
select(subject, activity, pc1, pc2, pc3, pc4, pc5) %>%
kable
# Chunk 22
set.seed(23489)
x1 <- rnorm(100, 0, 5)
x2 <- rnorm(100, 0, 5)
df1 <- data.frame(x = x1,
y = 1 * x1 + rnorm(100, 0, 4))
df2 <- data.frame(x = x2,
y = 5 * x2 + rnorm(100, 0, 4))
df <- rbind(df1, df2) %>%
mutate(y = y / 4)
# ICA plot
ica_plot <- ggplot(df) +
geom_point(aes(x = x, y = y),
alpha = 0.5, size = 5, color = "grey70") +
theme_classic(base_size = 16) +
geom_segment(aes(x = 0, xend = 5, y = 0, yend = 25 / 4),
col = "orange",
arrow = arrow(length = unit(0.50, "cm")),
size = 2) +
geom_segment(aes(x = 0, xend = 7, y = 0, yend = 7 / 4),
col = "orange",
arrow = arrow(length = unit(0.50, "cm")),
size = 2) +
ggtitle("Independent components") +
coord_equal()
# PCA plot
pcs <- eigen(cov(df))$vectors
df_subset <- df %>% filter(x < 5)
pca_plot <- ggplot(df) +
geom_point(aes(x = x, y = y),
alpha = 0.5, size = 5, color = "grey70") +
theme_classic(base_size = 16) +
geom_segment(aes(x = 0, xend = 7, y = 0, yend = (pcs[2, 1] / pcs[1, 1]) * 7),
col = "cornflowerblue",
arrow = arrow(length = unit(0.50, "cm")),
size = 2,
data = df_subset) +
geom_segment(aes(x = 0, xend = -5, y = 0, yend = (pcs[2, 2] / pcs[1, 2]) * -5),
col = "cornflowerblue",
arrow = arrow(length = unit(0.50, "cm")),
size = 2,
data = df_subset) +
ggtitle("Principal components") +
coord_equal()
gridExtra::grid.arrange(pca_plot, ica_plot, ncol = 2)
# Chunk 23: ica-activity
library(fastICA)
ica <- fastICA(X, n.comp = 6)
ica_df <- ica$S
colnames(ica_df) <- paste0("ic", 1:6)
ica_df <- ica_df %>% as.data.frame %>%
mutate(activity = activity,
activity_type = activity_type)
# plot the scatterplot matrix
p <- ggpairs(ica_df,
upper = list(continuous = "points"),
columns = 1:6,
mapping = aes(color = activity,
shape = activity_type,
alpha = 0.5))
for (i in 1:6) {
for (j in 1:6) {
p[i, j] <- p[i, j] +
scale_fill_manual(values = activity_palette) +
scale_color_manual(values = activity_palette)
}
}
p
# Chunk 24: svd
# mean-centered SVD
svd_full <- svd(scale(X, scale = F))
# get SVD projectiion
svd_projection <- as.matrix(scale(X, scale = F)) %*% svd_full$v
colnames(svd_projection) <- paste0("sv", 1:ncol(svd_projection))
svd_projection <- svd_projection %>%
as.data.frame %>%
mutate(activity = activity)
p_svd <- ggpairs(svd_projection, columns = 1:4,
upper = list(continuous = "points"),
mapping = aes(color = activity,
shape = activity_type,
alpha = 0.5))
for (i in 1:4) {
for (j in 1:4) {
p_svd[i, j] <- p_svd[i, j] +
scale_fill_manual(values = activity_palette) +
scale_color_manual(values = activity_palette)
}
}
p_svd
# Chunk 25: sparse-pca
library(sparsepca)
# sparse_pca <- spca(X)
load("Data/sparse_pca.RData")
sparse_pca_projection <- as.matrix(scale(X, scale = F)) %*% sparse_pca$loadings
colnames(sparse_pca_projection) <- paste0("sparse_pc", 1:ncol(sparse_pca_projection))
sparse_pca_projection <- sparse_pca_projection %>%
as.data.frame %>%
mutate(activity = activity,
activity_type = activity_type)
p_sparse_pca <- ggpairs(sparse_pca_projection, columns = 1:4,
upper = list(continuous = "points"),
mapping = aes(color = activity,
shape = activity_type,
alpha = 0.5))
for (i in 1:4) {
for (j in 1:4) {
p_sparse_pca[i, j] <- p_sparse_pca[i, j] +
scale_fill_manual(values = activity_palette) +
scale_color_manual(values = activity_palette)
}
}
p_sparse_pca
# Chunk 27: nmf
library(NMF)
nmf <- nmf(abs(X), 6)
av_survey <- read_csv(here("../data/bikepghpublic.csv"))
# load in the only library you ever really need
library(tidyverse)
setwd("~/")
av_survey <- read_csv(here("../data/bikepghpublic.csv"))
av_survey <- read_csv("../data/bikepghpublic.csv")
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
av_survey <- read_csv("../data/bikepghpublic.csv")
library(gt)
av_survey %>% sample_n(10) %>% gt()
?mutate_at
av_survey_sample <- av_survey %>% sample_n(10)
gt(av_survey_sample)
av_survey_sample %>% select_if(is.numeric)
av_survey_sample %>% mutate_if(is.numeric, ~(. + 7))
av_survey_sample %>% select_if(~sum(is.numeric(.x)) > 0)
av_survey_sample %>% select_if(~sum(is.na(.x)) > 0)
av_survey_sample %>% mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na, "missing", .x))
av_survey_sample %>% mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na, "missing", .))
av_survey_sample %>% mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na, "missing", "non-missing"))
av_survey_sample %>% mutate_if(~sum(is.na(.x)) > 0, if_else(is.na, "missing", "non-missing"))
av_survey_sample %>% mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na(.x), "missing", .x))
av_survey_sample %>% mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na(.x), "missing", as.character(.x)))
av_survey_sample %>%
select_if(~sum(is.na(.x)) > 0)
av_survey_sample %>%
select_if(~sum(is.na(.x)) > 0) %>%
mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na(.x), "missing", as.character(.x)))
av_survey_sample %>%
mutate_if(~sum(is.na(.x)) > 0, ~if_else(is.na(.x), "missing", as.character(.x)))
av_survey %>% summarise(is.na)
av_survey %>% summarise(~sum(is.na(.x))
av_survey %>% summarise(~sum(is.na(.x)))
av_survey %>% summarise_all(~sum(is.na(.x)))
av_survey %>% summarise_all(function(x) sum(is.na(x)))
av_survey %>% map_dbl(function(x) sum(is.na(x)))
av_survey %>% map_dbl(~sum(is.na(.x)))
apply(av_survey, function(x) sum(is.na(x)))
sapply(av_survey, function(x) sum(is.na(x)))
av_survey %>% select_if(is.numeric)
av_survey %>% select_if(is.numeric)
av_survey %>%
# select columns with at least one NA
# replace each NA value with the character "missing"
mutate_if(~sum(is.na(.x)) > 0, # condition
~if_else(is.na(.x), "missing", as.character(.x))) # function to apply
av_survey %>%
# select columns with at least one NA
# replace each NA value with the character "missing"
select_if(~sum(is.na(.x)) > 0) %>%
mutate_if(~sum(is.na(.x)) > 0, # condition
~if_else(is.na(.x), "missing", as.character(.x))) # function to apply
av_survey %>%
# select columns with at least one NA
# replace each NA value with the character "missing"
select_if(~sum(is.na(.x)) > 0)
av_survey_sample %>%
# select columns with at least one NA
# replace each NA value with the character "missing"
select_if(~sum(is.na(.x)) > 0)
av_survey_sample %>% select_if(is.numeric)
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
mutate_if(~sum(is.na(.x)) > 0,
~if_else(is.na(.x), "missing", as.character(.x)))
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
mutate_if(~sum(is.na(.x)) > 0,
~if_else(is.na(.x), "missing", as.character(.x)))
av_survey_sample <- av_survey %>%
# select jsut a few columns and give some more intuitive column names
select(id = `Response ID`,
start_date = `Start Date`,
end_date = `End Date`,
interacted_with_av_as_pedestrian = InteractPedestrian,
interacted_with_av_as_cyclist = InteractBicycle,
circumstanses_of_interaction = CircumstancesCoded,
safety_rating_human_driver = SafetyHuman,
safety_rating_av = SafetyAV,
familiarity_av_technology = FamiliarityTechnoology, # lol @ typo in data
approve_av_testing_pgh = FeelingsProvingGround) %>%
sample_n(10)
gt(av_survey_sample)
# using apply and the normal temporary function syntax
sapply(av_survey, function(x) sum(is.na(x)))
# using apply and the normal temporary function syntax
sapply(av_survey_sample, function(x) sum(is.na(x)))
# using purrr::map_dbl and the normal temporary function syntax
av_survey_sample %>% map_dbl(function(x) sum(is.na(x)))
# using purrr::map_dbl and the `~fun(.x)` temporary function syntax
av_survey_sample %>% map_dbl(~sum(is.na(.x)))
av_survey_sample %>% select_if(is.numeric)
av_survey_sample %>%
# select columns with at least one NA
# replace each NA value with the character "missing"
select_if(~sum(is.na(.x)) > 0)
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
mutate_if(~sum(is.na(.x)) > 0,
~if_else(is.na(.x), "missing", as.character(.x)))
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
summarise_if(is.character, mode)
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
summarise_if(is.character, table)
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
summarise_if(is.character, mean)
# function to calculate the mode (most common) observation
mode <- function(x) {
sort(table(x))[1]
}
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
summarise_if(is.character, mode)
names(sort(table(x)))[1]
# function to calculate the mode (most common) observation
mode <- function(x) {
names(sort(table(x)))[1]
}
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
summarise_if(is.character, mode)
?mutate_if
set.seed(45679)
av_survey_sample <- av_survey %>%
# select jsut a few columns and give some more intuitive column names
select(id = `Response ID`,
start_date = `Start Date`,
end_date = `End Date`,
interacted_with_av_as_pedestrian = InteractPedestrian,
interacted_with_av_as_cyclist = InteractBicycle,
circumstanses_of_interaction = CircumstancesCoded,
safety_rating_human_driver = SafetyHuman,
safety_rating_av = SafetyAV,
familiarity_av_technology = FamiliarityTechnoology, # lol @ typo in data
approve_av_testing_pgh = FeelingsProvingGround) %>%
sample_n(10)
gt(av_survey_sample)
# using apply and the normal temporary function syntax
sapply(av_survey_sample, function(x) sum(is.na(x)))
av_survey_sample %>% select_if(is.numeric)
av_survey_sample %>%
# select columns with at least one NA
# replace each NA value with the character "missing"
select_if(~sum(is.na(.x)) > 0)
av_survey_sample %>%
# only mutate columns with at least one NA
# replace each NA value with the character "missing"
mutate_if(~sum(is.na(.x)) > 0,
~if_else(is.na(.x), "missing", as.character(.x)))
# function to calculate the mode (most common) observation
mode <- function(x) {
names(sort(table(x)))[1]
}
# summarise character
av_survey_sample %>%
summarise_if(is.character, mode)
library(lubridate)
av_survey_sample %>%
)
av_survey_sample %>%
mutate(start_date = mdy(start_date),
end_date = mdy(end_date))
av_survey_sample$start_date
av_survey_sample %>%
mutate(start_date = mdy_hms(start_date),
end_date = mdy_hms(end_date))
av_survey_sample %>%
mutate_at(vars(start_date, end_date), mdy_hms)
av_survey_sample %>%
mutate_at(end_with("_date"), mdy_hms)
av_survey_sample %>%
mutate_at(ends_with("_date"), mdy_hms)
av_survey_sample %>%
mutate_at(vars(ends_with("_date")), mdy_hms)
blogdown::serve_site()
?select_at
?select_at
av_survey_sample %>% select_at(vars(start_date, end_date))
av_survey_sample %>% select(vars(start_date, end_date))
blogdown::stop_server()
av_survey_sample %>% select(vars(start_date, end_date))
av_survey_sample %>% select(end_with("_date"))
av_survey_sample %>% select(ends_with("_date"))
av_survey_sample %>% select(one_of("start_"))
av_survey_sample %>% select(one_of("start_date", "end_date"))
av_survey_sample %>% select(start_date, end_date)
av_survey_sample %>% select(ends_with("_date"))
av_survey_sample %>% select(contains("_date"))
av_survey_sample %>% select(matches("start_date"))
av_survey_sample %>% select(one_of("start_date", "end_date"))
av_survey_sample %>% select(matches("start_date", "end_date"))
select_variable <- function(variable) {
av_survey_sample %>% select(matches(variable))
}
select_variable("start_date")
av_survey_sample %>% select(num_range(3:4))
av_survey_sample %>% select(num_range(3, 4))
av_survey_sample %>% select(num_range(prefix = "start_date", range = 1:5))
av_survey_sample %>% select(num_range(1, range = 1:5))
?num_range
av_survey_sample %>% select(start_date, end_date)
av_survey_sample %>% select(ends_with("_date"))
av_survey_sample %>% select(contains("date"))
# the intuitive function doesn't work due to issues with "tidy eval"
select_variable_wrong <- function(variable) {
av_survey_sample %>% select(variable)
}
select_variable_wrong("start_date")
# the intuitive function doesn't work due to issues with "tidy eval"
select_variable_wrong <- function(variable) {
av_survey_sample %>% select(variable)
}
select_variable_wrong("start_date")
av_survey_sample %>% select("start_date")
# the intuitive function doesn't work due to issues with "tidy eval"
variable <- "start_date"
av_survey_sample %>% select(matches(variable))
av_survey_sample %>% select(variable)
# the intuitive function doesn't work due to issues with "tidy eval"
variable <- "start_date"
av_survey_sample %>% select(variable)
av_survey_sample %>% select(matches(variable))
av_survey_sample %>% select_at(vars(start_date, end_date))
av_survey_sample %>% mutate_at(vars(start_date, end_date), mdy_hms)
variable <- "start_date"
av_survey_sample %>% select(matches(variable))
variables <- c("start_date", "end_date")
av_survey_sample %>% select(one_of(variable))
av_survey_sample %>% select(one_of(variables))
av_survey_sample %>% select(matches(variables))
av_survey_sample %>% select(matches(variables))
av_survey_sample %>% select(one_of(variables))
head(av_survey_sample)
av_survey_sample %>% summarise_at(vars(contains("interacted")), ~sum(.x == "Yes"))
av_survey_sample %>% select_all()
av_survey_sample %>% rename_all(~paste0("X", .x))
av_survey_sample %>% rename_all(~gsub("_", ".", .x))
av_survey_sample %>%
mutate_all(as.numeric)
summarise_all(n_distinct
av_survey_sample %>%
summarise_all(n_distinct)
av_survey_sample %>%
summarise_all(n_distinct)
av_survey_sample %>%
rename_if(is.numeric, ~paste0(.x, "_num"))
av_survey_sample %>%
rename_if(is.numeric, ~paste0("num_", .x))
av_survey_sample %>% rename_at(vars(contains("av")), grepl("av", "AV"))
av_survey_sample %>% rename_at(vars(contains("av")), ~gsub("av", "AV", .x))
blogdown
blogdown::serve_site()
print(av_survey_sample, n = 10)
print(av_survey_sample, n = 10)
1
print(av_survey_sample, n = 10)
av_survey_sample <- av_survey %>%
# select jsut a few columns and give some more intuitive column names
select(id = `Response ID`,
start_date = `Start Date`,
end_date = `End Date`,
interacted_with_av_as_pedestrian = InteractPedestrian,
interacted_with_av_as_cyclist = InteractBicycle,
circumstanses_of_interaction = CircumstancesCoded,
safety_rating_human_driver = SafetyHuman,
safety_rating_av = SafetyAV,
familiarity_av_technology = FamiliarityTechnoology, # lol @ typo in data
approve_av_testing_pgh = FeelingsProvingGround) %>%
sample_n(10) %>% as.data.frame
as.data.frame(av_survey_sample)
gt(av_survey_sample)
blogdown::stop_server
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
install.packages("paletteer")
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
setwd("~/Google Drive/Personal webpage/personal-website-netlify")
blogdown::serve_site()
blogdown::stop_server()
