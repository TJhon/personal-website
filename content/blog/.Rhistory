ungroup() %>%
group_by(a1) %>%
mutate(n_a1 = n()) %>%
ungroup() %>%
mutate(p_num = n_a0_a1 / n_a0)
# calculate the denominator
df <- df %>% group_by(a0, a1, l) %>%
mutate(n_a0_a1_l = n()) %>%
ungroup() %>%
group_by(a0, l) %>%
mutate(n_a0_l = n()) %>%
ungroup() %>%
mutate(p_denom = n_a0_a1_l / n_a0_l)
# check that weights match those given in table 1.3
df %>% group_by(a0, a1) %>% summarise(unique(p_num))
df %>% group_by(a0, a1, l) %>% summarise(unique(p_num), unique(p_denom))
# add pseudo population outcome
df <- df %>%
mutate(sw = p_num / p_denom,
pseudo_y = y * sw)
# show independence of A(a) and L(1) in the pseudo population
# (the following two quantities should be equal)
# P(A(1) = 1 | A(0) = 1, L(1) = 0) = P(A(1) = 1 | A(0) = 1, L(1) = 1)
df %>%
filter(a0 == 1) %>%
group_by(l) %>%
summarise(sum((a1 == 1) * sw) / n())
# P(A(1) = 1 | A(0) = 0, L(1) = 0) = P(A(1) = 1 | A(0) = 0, L(1) = 1)
df %>%
filter(a0 == 0) %>%
group_by(l) %>%
summarise(sum((a1 == 1) * sw) / n())
# estimate the conditional outcomes using IPTW
# E(Y | A(0) = 1, A(1) = 0) & E(Y | A(0) = 0, A(1) = 0)
df %>% filter(a1 == 0) %>%
group_by(a0) %>%
summarise(mean(y * sw))
# fit the ols model
lm(y * sw ~ a0 * a1, data = df)
############## DYNAMIC REGIME #################
# now the treatment assignment depends on the covariate L
# g = {1, L(1)}
#### G-formula
# we can calculate the expected outcome unger this treatment regime
# E[Y(g = {1, L(1)})] = E[Y | A(0) = 1, A(1) = 1, L(1) = 1] P [L(1) = 1|A(0) = 1] +
#                         E[Y |A(0) = 1, A(1) = 0, L(1) = 0] P [L(1) = 0|A(0) = 1]
# first we calculate the probability terms
p <- df %>%
filter(a0 == 1, a1 == l) %>%
summarise(p_l0 = sum(l == 0) / n(),
p_l1 = sum(l == 1) / n()) %>%
unlist()
# then we calculate the expectation terms
e <- df %>% filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
summarise(y_l = mean(y)) %>%
select(y_l) %>%
unlist()
# calculate the expectated outcome for the regime
EY <- e[1] * p[1] + e[2] * p[2]
EY
#### IPTW
# we want to create unstabilized weights
# W = 1 / (f[A(0)] f[A(1) | A(0), L(1)])
df <- df %>%
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df))
head(df)
df <- data.frame(a0 = c(rep(0, 1000 * (2 + 6 + 6 + 2)),
rep(1, 1000 * (3 + 9 + 3 + 1))),
a1 = c(rep(0, 2000), rep(1, 6000), rep(0, 6000),
rep(1, 2000), rep(0, 3000), rep(1, 9000),
rep(0, 3000), rep(1, 1000)),
l = c(rep(1, 8000), rep(0, 8000),
rep(1, 12000), rep(0, 4000)),
y = c(rep(200, 2000), rep(220, 6000), rep(50, 6000),
rep(70, 2000), rep(130, 3000), rep(110, 9000),
rep(230, 3000), rep(250, 1000)))
p <- df %>%
filter(a0 == 1, a1 == l) %>%
summarise(p_l0 = sum(l == 0) / n(),
p_l1 = sum(l == 1) / n()) %>%
unlist()
e <- df %>% filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
summarise(y_l = mean(y)) %>%
select(y_l) %>%
unlist()
EY <- e[1] * p[1] + e[2] * p[2]
EY
df <- df %>%
group_by(a0) %>%
mutate(dynamicp_a0 = n() / nrow(df))
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(n_a0 = n()) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
mutate(n_a1_a0_l = n())
df <- df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(n_a0 = n()) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
mutate(n_a1_a0_l = n()) %>%
ungroup() %>%
# calculating f[A(0)] f[A(1) | A(0), L(1)])
mutate(p_denom = (n_a1 / n()) * (n_a1_a0_l / n()))
df <- df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(n_a0 = n()) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
mutate(n_a1_a0_l = n()) %>%
ungroup() %>%
# calculating f[A(0)] f[A(1) | A(0), L(1)])
mutate(p_denom = (n_a0 / n()) * (n_a1_a0_l / n()))
df
df$p_denom
unique(df$p_denom)
9000 / 32000
dim(df)
9000 / 12000
############## STATIC REGIME #################
df <- data.frame(a0 = c(rep(0, 1000 * (2 + 6 + 6 + 2)),
rep(1, 1000 * (3 + 9 + 3 + 1))),
a1 = c(rep(0, 2000), rep(1, 6000), rep(0, 6000),
rep(1, 2000), rep(0, 3000), rep(1, 9000),
rep(0, 3000), rep(1, 1000)),
l = c(rep(1, 8000), rep(0, 8000),
rep(1, 12000), rep(0, 4000)),
y = c(rep(200, 2000), rep(220, 6000), rep(50, 6000),
rep(70, 2000), rep(130, 3000), rep(110, 9000),
rep(230, 3000), rep(250, 1000)))
lm(y ~ a0 * a1, data = df)
library(dplyr)
# calculate the numerator
df <- df %>% group_by(a0, a1) %>%
mutate(n_a0_a1 = n()) %>%
ungroup() %>%
group_by(a0) %>%
mutate(n_a0 = n()) %>%
ungroup() %>%
group_by(a1) %>%
mutate(n_a1 = n()) %>%
ungroup() %>%
mutate(p_num = n_a0_a1 / n_a0)
# calculate the denominator
df <- df %>% group_by(a0, a1, l) %>%
mutate(n_a0_a1_l = n()) %>%
ungroup() %>%
group_by(a0, l) %>%
mutate(n_a0_l = n()) %>%
ungroup() %>%
mutate(p_denom = n_a0_a1_l / n_a0_l)
# check that weights match those given in table 1.3
df %>% group_by(a0, a1) %>% summarise(unique(p_num))
df %>% group_by(a0, a1, l) %>% summarise(unique(p_num), unique(p_denom))
# add pseudo population outcome
df <- df %>%
mutate(sw = p_num / p_denom,
pseudo_y = y * sw)
# show independence of A(a) and L(1) in the pseudo population
# (the following two quantities should be equal)
# P(A(1) = 1 | A(0) = 1, L(1) = 0) = P(A(1) = 1 | A(0) = 1, L(1) = 1)
df %>%
filter(a0 == 1) %>%
group_by(l) %>%
summarise(sum((a1 == 1) * sw) / n())
# P(A(1) = 1 | A(0) = 0, L(1) = 0) = P(A(1) = 1 | A(0) = 0, L(1) = 1)
df %>%
filter(a0 == 0) %>%
group_by(l) %>%
summarise(sum((a1 == 1) * sw) / n())
# estimate the conditional outcomes using IPTW
# E(Y | A(0) = 1, A(1) = 0) & E(Y | A(0) = 0, A(1) = 0)
df %>% filter(a1 == 0) %>%
group_by(a0) %>%
summarise(mean(y * sw))
# fit the ols model
lm(y * sw ~ a0 * a1, data = df)
############## DYNAMIC REGIME #################
df <- data.frame(a0 = c(rep(0, 1000 * (2 + 6 + 6 + 2)),
rep(1, 1000 * (3 + 9 + 3 + 1))),
a1 = c(rep(0, 2000), rep(1, 6000), rep(0, 6000),
rep(1, 2000), rep(0, 3000), rep(1, 9000),
rep(0, 3000), rep(1, 1000)),
l = c(rep(1, 8000), rep(0, 8000),
rep(1, 12000), rep(0, 4000)),
y = c(rep(200, 2000), rep(220, 6000), rep(50, 6000),
rep(70, 2000), rep(130, 3000), rep(110, 9000),
rep(230, 3000), rep(250, 1000)))
# now the treatment assignment depends on the covariate L
# g = {1, L(1)}
#### G-formula
# we can calculate the expected outcome unger this treatment regime
# E[Y(g = {1, L(1)})] = E[Y | A(0) = 1, A(1) = 1, L(1) = 1] P [L(1) = 1|A(0) = 1] +
#                         E[Y |A(0) = 1, A(1) = 0, L(1) = 0] P [L(1) = 0|A(0) = 1]
# first we calculate the probability terms
p <- df %>%
filter(a0 == 1, a1 == l) %>%
summarise(p_l0 = sum(l == 0) / n(),
p_l1 = sum(l == 1) / n()) %>%
unlist()
# then we calculate the expectation terms
e <- df %>% filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
summarise(y_l = mean(y)) %>%
select(y_l) %>%
unlist()
# calculate the expectated outcome for the regime
EY <- e[1] * p[1] + e[2] * p[2]
EY
#### IPTW
# we want to create unstabilized weights
# W = 1 / (f[A(0)] f[A(1) | A(0), L(1)])
df <- df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 1) / n()) %>%
ungroup() %>% head
############## STATIC REGIME #################
df <- data.frame(a0 = c(rep(0, 1000 * (2 + 6 + 6 + 2)),
rep(1, 1000 * (3 + 9 + 3 + 1))),
a1 = c(rep(0, 2000), rep(1, 6000), rep(0, 6000),
rep(1, 2000), rep(0, 3000), rep(1, 9000),
rep(0, 3000), rep(1, 1000)),
l = c(rep(1, 8000), rep(0, 8000),
rep(1, 12000), rep(0, 4000)),
y = c(rep(200, 2000), rep(220, 6000), rep(50, 6000),
rep(70, 2000), rep(130, 3000), rep(110, 9000),
rep(230, 3000), rep(250, 1000)))
lm(y ~ a0 * a1, data = df)
library(dplyr)
# calculate the numerator
df <- df %>% group_by(a0, a1) %>%
mutate(n_a0_a1 = n()) %>%
ungroup() %>%
group_by(a0) %>%
mutate(n_a0 = n()) %>%
ungroup() %>%
group_by(a1) %>%
mutate(n_a1 = n()) %>%
ungroup() %>%
mutate(p_num = n_a0_a1 / n_a0)
# calculate the denominator
df <- df %>% group_by(a0, a1, l) %>%
mutate(n_a0_a1_l = n()) %>%
ungroup() %>%
group_by(a0, l) %>%
mutate(n_a0_l = n()) %>%
ungroup() %>%
mutate(p_denom = n_a0_a1_l / n_a0_l)
# check that weights match those given in table 1.3
df %>% group_by(a0, a1) %>% summarise(unique(p_num))
df %>% group_by(a0, a1, l) %>% summarise(unique(p_num), unique(p_denom))
# add pseudo population outcome
df <- df %>%
mutate(sw = p_num / p_denom,
pseudo_y = y * sw)
# show independence of A(a) and L(1) in the pseudo population
# (the following two quantities should be equal)
# P(A(1) = 1 | A(0) = 1, L(1) = 0) = P(A(1) = 1 | A(0) = 1, L(1) = 1)
df %>%
filter(a0 == 1) %>%
group_by(l) %>%
summarise(sum((a1 == 1) * sw) / n())
# P(A(1) = 1 | A(0) = 0, L(1) = 0) = P(A(1) = 1 | A(0) = 0, L(1) = 1)
df %>%
filter(a0 == 0) %>%
group_by(l) %>%
summarise(sum((a1 == 1) * sw) / n())
# estimate the conditional outcomes using IPTW
# E(Y | A(0) = 1, A(1) = 0) & E(Y | A(0) = 0, A(1) = 0)
df %>% filter(a1 == 0) %>%
group_by(a0) %>%
summarise(mean(y * sw))
# fit the ols model
lm(y * sw ~ a0 * a1, data = df)
############## DYNAMIC REGIME #################
df <- data.frame(a0 = c(rep(0, 1000 * (2 + 6 + 6 + 2)),
rep(1, 1000 * (3 + 9 + 3 + 1))),
a1 = c(rep(0, 2000), rep(1, 6000), rep(0, 6000),
rep(1, 2000), rep(0, 3000), rep(1, 9000),
rep(0, 3000), rep(1, 1000)),
l = c(rep(1, 8000), rep(0, 8000),
rep(1, 12000), rep(0, 4000)),
y = c(rep(200, 2000), rep(220, 6000), rep(50, 6000),
rep(70, 2000), rep(130, 3000), rep(110, 9000),
rep(230, 3000), rep(250, 1000)))
# now the treatment assignment depends on the covariate L
# g = {1, L(1)}
#### G-formula
# we can calculate the expected outcome unger this treatment regime
# E[Y(g = {1, L(1)})] = E[Y | A(0) = 1, A(1) = 1, L(1) = 1] P [L(1) = 1|A(0) = 1] +
#                         E[Y |A(0) = 1, A(1) = 0, L(1) = 0] P [L(1) = 0|A(0) = 1]
# first we calculate the probability terms
p <- df %>%
filter(a0 == 1, a1 == l) %>%
summarise(p_l0 = sum(l == 0) / n(),
p_l1 = sum(l == 1) / n()) %>%
unlist()
# then we calculate the expectation terms
e <- df %>% filter(a0 == 1, a1 == l) %>%
group_by(a1) %>%
summarise(y_l = mean(y)) %>%
select(y_l) %>%
unlist()
# calculate the expectated outcome for the regime
EY <- e[1] * p[1] + e[2] * p[2]
EY
#### IPTW
# we want to create unstabilized weights
# W = 1 / (f[A(0)] f[A(1) | A(0), L(1)])
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 1) / n()) %>%
ungroup() %>% head
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 0) / n()) %>%
ungroup() %>% head
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 0) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0, p_a1_a0_l))
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 0) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0), unique(p_a1_a0_l))
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 0) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0), unique(p_a1_a0_l)) %>%
sort(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 0) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == l) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 1) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = sum(a1 == 1) / n()) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(n = n(), unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = case_when(a1 == 1 ~ sum(a1 == 1 / n()),
a1 == 0 ~ sum(a1 == 0 / n()))) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(n = n(), unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = case_when(a1 == 1 ~ sum(a1 == 1) / n(),
a1 == 0 ~ sum(a1 == 0) / n())) %>%
ungroup() %>%
group_by(a0, l, a1) %>%
summarise(n = n(), unique(p_a0), unique(p_a1_a0_l)) %>%
arrange(a0, desc(l), a1)
df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = case_when(a1 == 1 ~ sum(a1 == 1) / n(),
a1 == 0 ~ sum(a1 == 0) / n())) %>%
ungroup() %>%
mutate(w = 1 / (p_a0 * p_a1_a0_l))
df <- df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = case_when(a1 == 1 ~ sum(a1 == 1) / n(),
a1 == 0 ~ sum(a1 == 0) / n())) %>%
ungroup() %>%
mutate(w = 1 / (p_a0 * p_a1_a0_l))
EY <- df %>% filter(a0 == l) %>% summarise(mean(w * y))
EY
df <- df %>%
# calculating f[A(0)]
group_by(a0) %>%
mutate(p_a0 = n() / nrow(df)) %>%
ungroup() %>%
# calculating f[A(1) | A(0), L(1)])
group_by(a0, l) %>%
mutate(p_a1_a0_l = case_when(a1 == 1 ~ sum(a1 == 1) / n(),
a1 == 0 ~ sum(a1 == 0) / n())) %>%
ungroup() %>%
mutate(w = 1 / (p_a0 * p_a1_a0_l))
EY <- df %>% filter(a0 == l) %>% summarise(mean(w * y))
EY
EY <- df %>% filter(a0 == l) %>% group_by(a1) %>% summarise(mean(w * y))
EY
EY <- df %>% filter(a0 == l) %>% group_by(a1) %>% summarise(mean(1 / w * y))
EY
EY <- df %>% filter(a0 == l) %>% summarise(mean(1 / w * y))
EY
df %>% group_by(a0, l, a1) %>% summarise(unique(w))
df %>% group_by(a0, l, a1) %>% arrange(a0, desc(l), a1) %>% summarise(unique(w))
8 * 4
8 * 5
