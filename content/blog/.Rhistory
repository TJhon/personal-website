#                                          "RED CELL COUNT",
#                                          `RED CELL COUNT`),
#             sodium = getLabRange(lab_ranges,
#                                  "SODIUM",
#                                  `SODIUM`),
#             urea_nitrogen_blood = getLabRange(lab_ranges,
#                                               "UREA NITROGEN, BLOOD (BUN)",
#                                               `UREA NITROGEN, BLOOD (BUN)`),
#             white_blood_cell_count = getLabRange(lab_ranges,
#                                                  "WHITE BLOOD CELL COUNT",
#                                                  `WHITE BLOOD CELL COUNT`))
#
# write.csv(labs_categorical, file = "../../../data/processed_data/04_unstructured_data/labs_categorical.csv")
# load in the categorical lab data
labs_categorical <- as.data.frame(fread("../../../data/processed_data/04_unstructured_data/labs_categorical.csv"))
labs_categorical_condensed <- labs_categorical %>%
select(-V1) %>%
mutate(lab_date = ymd_hms(lab_date)) %>%
gather(key = "lab", value = "value", -patient_id, -lab_date) %>%
drop_na() %>%
mutate(lab_result = paste0("lab_", lab, "_", value)) %>%
group_by(patient_id, lab_date) %>%
summarise(lab_results_combined = do.call(paste, as.list(lab_result))) %>%
ungroup() %>%
mutate(measurement_type = "lab") %>%
select(patient_id, date = lab_date,
measurement_type, results = lab_results_combined)
# Extract vitals measurements -------------------------------------------------
# vitals_wide <- vitals_clean %>%
#   transmute(patient_id = PATNUM,
#             # round date to the day level
#             vitals_date = floor_date(RECORDED_TIME_SET, unit = "day"),
#             # also record the actual time of recording
#             vitals_time = RECORDED_TIME_SET,
#             vitals_name = FLO_MEAS_NAME,
#             vitals_value = MEAS_VALUE) %>%
#   # add surgery times
#   # (if multiple surgery times, this will duplicate each vital measurement)
#   left_join(surgery_times, by = "patient_id") %>%
#   # identify vitals on the same day as surgery
#   # (goal is to separate vitals immediately before and after surgery)
#   mutate(same_day_as_surgery = case_when(
#     surgery_date == vitals_date & vitals_time < surgery_time ~ "before surgery",
#     surgery_date == vitals_date & vitals_time >= surgery_time ~ "after surgery",
#     surgery_date != vitals_date ~ "no")) %>%
#   # condense duplicated vitals measurements arising from joining multiple surgeries
#   group_by(patient_id, vitals_time, vitals_name) %>%
#   summarise(vitals_date = unique(vitals_date),
#             vitals_value = unique(vitals_value),
#             same_day_as_surgery = case_when(sum(same_day_as_surgery == "before surgery") > 0 ~ "before surgery",
#                                             sum(same_day_as_surgery == "after surgery") > 0 ~ "after surgery",
#                                             sum(same_day_as_surgery == "before surgery") == 0 &
#                                             sum(same_day_as_surgery == "after surgery") == 0 ~ "no")) %>%
#   ungroup() %>%
#   # if the vital is measured on the day of surgery,
#   # - before surgery, set time to 9AM
#   # - after surgery, set time to 5PM
#   # - not on day of surgery, set time to 12PM
#   mutate(vitals_date = case_when(
#     same_day_as_surgery == "before surgery" ~ ymd_hms(paste(as.character(vitals_date), "09:00:00")),
#     same_day_as_surgery == "after surgery" ~ ymd_hms(paste(as.character(vitals_date), "17:00:00")),
#     same_day_as_surgery == "no" | is.na(same_day_as_surgery) ~ ymd_hms(paste(as.character(vitals_date), "12:00:00")))) %>%
#   # remove superfluous variables that are no longer needed
#   select(-vitals_time, -same_day_as_surgery) %>%
#   distinct() %>%
#   # if there are multiple lab values recorded on the same day, take the highest value
#   group_by(patient_id, vitals_date, vitals_name) %>%
#   summarise(vitals_value = max(vitals_value, na.rm = T)) %>%
#   ungroup() %>%
#   # convert to wideform data for conversion of variables to categorical
#   spread(key = "vitals_name", value = "vitals_value")
#
#
# # define the categorical classes
# vitals_categorical <- vitals_wide %>%
#   transmute(patient_id, vitals_date,
#             bmi = case_when(BMI < 18.5 ~ "bmi_underweight",
#                             BMI >= 18.5 & BMI < 25 ~ "bmi_normal",
#                             BMI >= 25 & BMI < 30 ~ "bmi_overweight",
#                             BMI >= 30 ~ "bmi_obese"),
#             temperature = case_when((TEMPERATURE <= 99.5) & (TEMPERATURE >= 97.7) ~ "temperature_normal",
#                                     (TEMPERATURE < 97.7) & (TEMPERATURE > 95) ~ "temperature_cool",
#                                     TEMPERATURE <= 95 ~ "temperature_very_cold",
#                                     (TEMPERATURE > 99.5) & (TEMPERATURE < 104) ~ "temperature_warm",
#                                     TEMPERATURE >= 104 ~ "temperature_very_hot"),
#             pulse = case_when(PULSE < 60 ~ "pulse_below_60",
#                               PULSE >= 60 & PULSE <= 100 ~ "pulse_normal",
#                               (PULSE > 100) & (PULSE < 120) ~ "pulse_above_100",
#                               PULSE >= 120 ~ "pulse_above_120"))
#
# write.csv(vitals_categorical, file = "../../../data/processed_data/04_unstructured_data/vitals_categorical.csv")
# load in the categorical vitals data
vitals_categorical <- as.data.frame(fread("../../../data/processed_data/04_unstructured_data/vitals_categorical.csv"))
vitals_categorical_condensed <- vitals_categorical %>%
select(-V1) %>%
mutate(vitals_date = ymd_hms(vitals_date)) %>%
# convert back to long-form data
gather(key = "vital", value = "vitals_result", -patient_id, -vitals_date) %>%
drop_na() %>%
mutate(vitals_result = paste0("vitals_", vitals_result)) %>%
# combine all measurements by patient and date
group_by(patient_id, vitals_date) %>%
summarise(vitals_results_combined = do.call(paste, as.list(vitals_result))) %>%
ungroup() %>%
# put into common format for joining to other data sources
mutate(measurement_type = "vitals") %>%
select(patient_id, date = vitals_date,
measurement_type, results = vitals_results_combined)
# Extract diagnosis measurements ----------------------------------------------
# add decimal point to ICD10 column
# convert the ICD10 codes to ICD9 codes
diagnoses_categorical <- diagnoses_clean %>%
# define a separate column for icd9 codes and icd10 codes
mutate(icd9 = case_when(is_icd9 ~ DX_CODE),
icd10 = case_when(!is_icd9 ~ str_sub(DX_CODE, 1, 7))) %>%
# add a column for conversion for icd10 to icd9
left_join(transmute(icd10_to_icd9,
icd10 = icd10_decimal,
icd9_converted = icd9_decimal),
by = "icd10") %>%
# fill in the icd9 codes into the converted (icd10 > icd9) code column
mutate(icd9_converted = if_else(is_icd9, icd9, icd9_converted)) %>%
# keep only relevant variables
transmute(patient_id = PATNUM,
diagnosis_date = ymd_hms(paste(as.character(floor_date(ADMIT_DATE_SET, unit = "day")), "09:00:00")),
# truncate icd9 converted codes after decimal point
icd9_groups = paste0("diagnosis_",
str_split(icd9_converted,
"\\.", simplify = TRUE)[, 1])) %>%
distinct()
# combine all diagnoses that take place on the same date each patient
diagnoses_categorical_condensed <- diagnoses_categorical %>%
group_by(patient_id, diagnosis_date) %>%
summarise(diagnoses_combined = do.call(paste, as.list(icd9_groups))) %>%
ungroup() %>%
# convert to a common format for joining to other data sources
mutate(measurement_type = "diagnoses") %>%
select(patient_id, date = diagnosis_date,
measurement_type, results = diagnoses_combined)
# Extract medication measurements ---------------------------------------------
library(readxl)
# load in useful immunosuppressant information
immuno_meds <- read_xlsx("../../../data/additional_data/medication_classes/Immunosuppressants.xlsx")
immuno_meds_clean <- immuno_meds %>%
transmute(medication_id = as.character(MEDICATION_ID),
increase_ssi = `Immunosuppresant increases risk of SSI?`)
# load in all medication classes information
med_classes <- read_xlsx("../../../data/additional_data/medication_classes/SSI_ALL_MEDICATIONS.xlsx")
# replace all non-standard characters with underscores
med_classes_clean <- med_classes %>%
transmute(medication_id = as.character(MEDICATION_ID),
medication_thera_class = gsub(" ", "_", tolower(THERA_CLASS)),
medication_thera_class = gsub("\\.", "_", medication_thera_class),
medication_thera_class = gsub("\\-", "_", medication_thera_class),
medication_thera_class = gsub("\\/", "_", medication_thera_class),
medication_thera_class = gsub(",", "", medication_thera_class),
medication_thera_class = if_else(is.na(medication_thera_class), "other", medication_thera_class))
# extract only the useful information
meds_categorical <- meds_clean %>%
mutate(medication_id = as.character(MEDICATION_ID)) %>%
# add immunosuppressant info
left_join(immuno_meds_clean, by = "medication_id") %>%
mutate(increase_ssi = case_when(increase_ssi == "Y" ~ "ssi_risk",
increase_ssi == "N" ~ "non_ssi_risk",
is.na(increase_ssi) ~ "non_ssi_risk")) %>%
# add medication classes
left_join(med_classes_clean, by = "medication_id") %>%
# define medication groups (class + ssi risk)
transmute(patient_id = PATNUM,
medication_date = ymd_hms(paste(as.character(floor_date(ORDERING_DATE_SET, unit = "day")), "17:00:00")),
medication_group = paste0(medication_thera_class, "_", increase_ssi)) %>%
distinct()
# combine all medications from the same day for each patient
meds_categorical_condensed <- meds_categorical %>%
group_by(patient_id, medication_date) %>%
mutate(medication_group = paste0("meds_", medication_group)) %>%
summarise(meds_combined = do.call(paste, as.list(medication_group))) %>%
ungroup() %>%
# convert to common format for joining with other data sources
mutate(measurement_type = "meds") %>%
select(patient_id, date = medication_date,
measurement_type, results = meds_combined)
# Combine all measurements ----------------------------------------------------
# combine all sources of data
data_unstructured <- rbind(surgery_categorical_condensed,
patient_categorical_condensed,
chronic_conditions_categorical_condensed,
labs_categorical_condensed,
vitals_categorical_condensed,
meds_categorical_condensed) %>%
arrange(patient_id, date, measurement_type) %>%
filter(!is.na(date))
# add a variable for how long since the last entry
time_gaps <- data_unstructured %>%
# get the date (ignore time)
mutate(floor_date = floor_date(date, unit = "day"),
# make the date at midnight to appear above all other entires on
# the same day
date = ymd_hms(paste(floor_date, "00:00:00"))) %>%
# identify how many days since the previous date
group_by(patient_id) %>%
mutate(prev_date = c(ymd_hms(NA), floor_date[1:n()-1]),
days = difftime(floor_date, prev_date, units = "days")) %>%
ungroup() %>%
# remove multiple entries on the same day
filter(days > 0) %>%
# add a variable for number of days since last entry
mutate(measurement_type = "time",
results = case_when(days < 7 ~ "days",
days >= 7 & days < 14 ~ "one_week",
days >= 14 & days < 30 ~ "many_weeks",
days >= 30 & days < 60 ~ "one_month",
days >= 60 & days < 90 ~ "two_months",
days >= 90 ~ "many_months",
days > 365 ~ "years")) %>%
# select same variables as master dataset and remove duplicates
distinct(patient_id, date, measurement_type, results)
# add a measurement for time gaps to data_unstructured
data_unstructured <- rbind(data_unstructured, time_gaps) %>%
arrange(patient_id, date)
ids_df <- ssi_train_ids[1, ]
patient <- ssi_train_ids[1, ]
head(data_unstructured %>%
filter(patient_id == patient$patient_id))
#                                  `SODIUM`),
#             urea_nitrogen_blood = getLabRange(lab_ranges,
#                                               "UREA NITROGEN, BLOOD (BUN)",
#                                               `UREA NITROGEN, BLOOD (BUN)`),
#             white_blood_cell_count = getLabRange(lab_ranges,
#                                                  "WHITE BLOOD CELL COUNT",
#                                                  `WHITE BLOOD CELL COUNT`))
#
# write.csv(labs_categorical, file = "../../../data/processed_data/04_unstructured_data/labs_categorical.csv")
# load in the categorical lab data
labs_categorical <- as.data.frame(fread("../../../data/processed_data/04_unstructured_data/labs_categorical.csv"))
#                                  `SODIUM`),
#             urea_nitrogen_blood = getLabRange(lab_ranges,
#                                               "UREA NITROGEN, BLOOD (BUN)",
#                                               `UREA NITROGEN, BLOOD (BUN)`),
#             white_blood_cell_count = getLabRange(lab_ranges,
#                                                  "WHITE BLOOD CELL COUNT",
#                                                  `WHITE BLOOD CELL COUNT`))
#
# write.csv(labs_categorical, file = "../../../data/processed_data/04_unstructured_data/labs_categorical.csv")
# load in the categorical lab data
labs_categorical <- as.data.frame(fread("../../../data/processed_data/04_unstructured_data_tmp/labs_categorical.csv"))
labs_categorical_condensed <- labs_categorical %>%
select(-V1) %>%
mutate(lab_date = ymd_hms(lab_date)) %>%
gather(key = "lab", value = "value", -patient_id, -lab_date) %>%
drop_na() %>%
mutate(lab_result = paste0("lab_", lab, "_", value)) %>%
group_by(patient_id, lab_date) %>%
summarise(lab_results_combined = do.call(paste, as.list(lab_result))) %>%
ungroup() %>%
mutate(measurement_type = "lab") %>%
select(patient_id, date = lab_date,
measurement_type, results = lab_results_combined)
# combine all sources of data
data_unstructured <- rbind(surgery_categorical_condensed,
patient_categorical_condensed,
chronic_conditions_categorical_condensed,
labs_categorical_condensed,
vitals_categorical_condensed,
meds_categorical_condensed) %>%
arrange(patient_id, date, measurement_type) %>%
filter(!is.na(date))
#                                     TEMPERATURE <= 95 ~ "temperature_very_cold",
#                                     (TEMPERATURE > 99.5) & (TEMPERATURE < 104) ~ "temperature_warm",
#                                     TEMPERATURE >= 104 ~ "temperature_very_hot"),
#             pulse = case_when(PULSE < 60 ~ "pulse_below_60",
#                               PULSE >= 60 & PULSE <= 100 ~ "pulse_normal",
#                               (PULSE > 100) & (PULSE < 120) ~ "pulse_above_100",
#                               PULSE >= 120 ~ "pulse_above_120"))
#
# write.csv(vitals_categorical, file = "../../../data/processed_data/04_unstructured_data/vitals_categorical.csv")
# load in the categorical vitals data
vitals_categorical <- as.data.frame(fread("../../../data/processed_data/04_unstructured_data_tmp/vitals_categorical.csv"))
vitals_categorical_condensed <- vitals_categorical %>%
select(-V1) %>%
mutate(vitals_date = ymd_hms(vitals_date)) %>%
# convert back to long-form data
gather(key = "vital", value = "vitals_result", -patient_id, -vitals_date) %>%
drop_na() %>%
mutate(vitals_result = paste0("vitals_", vitals_result)) %>%
# combine all measurements by patient and date
group_by(patient_id, vitals_date) %>%
summarise(vitals_results_combined = do.call(paste, as.list(vitals_result))) %>%
ungroup() %>%
# put into common format for joining to other data sources
mutate(measurement_type = "vitals") %>%
select(patient_id, date = vitals_date,
measurement_type, results = vitals_results_combined)
# combine all sources of data
data_unstructured <- rbind(surgery_categorical_condensed,
patient_categorical_condensed,
chronic_conditions_categorical_condensed,
labs_categorical_condensed,
vitals_categorical_condensed,
meds_categorical_condensed) %>%
arrange(patient_id, date, measurement_type) %>%
filter(!is.na(date))
# add a variable for how long since the last entry
time_gaps <- data_unstructured %>%
# get the date (ignore time)
mutate(floor_date = floor_date(date, unit = "day"),
# make the date at midnight to appear above all other entires on
# the same day
date = ymd_hms(paste(floor_date, "00:00:00"))) %>%
# identify how many days since the previous date
group_by(patient_id) %>%
mutate(prev_date = c(ymd_hms(NA), floor_date[1:n()-1]),
days = difftime(floor_date, prev_date, units = "days")) %>%
ungroup() %>%
# remove multiple entries on the same day
filter(days > 0) %>%
# add a variable for number of days since last entry
mutate(measurement_type = "time",
results = case_when(days < 7 ~ "days",
days >= 7 & days < 14 ~ "one_week",
days >= 14 & days < 30 ~ "many_weeks",
days >= 30 & days < 60 ~ "one_month",
days >= 60 & days < 90 ~ "two_months",
days >= 90 ~ "many_months",
days > 365 ~ "years")) %>%
# select same variables as master dataset and remove duplicates
distinct(patient_id, date, measurement_type, results)
# add a measurement for time gaps to data_unstructured
data_unstructured <- rbind(data_unstructured, time_gaps) %>%
arrange(patient_id, date)
# save the long-form unstructured dataset
write_csv(data_unstructured, path = "../../../data/processed_data/04_unstructured_data_tmp/unstructured_long.csv")
# get the PROCIDs for each patient/date combo
procedure_ids <- surgical_encounters_clean %>%
select(patient_id = PATNUM,
procedure_id = PROCID,
date = PROCDATE_SET)
# get training SSI and non-SSI ids
train_ids <- read_csv("../../../data/processed_data/train_test_val_patnums/patnum_train.csv")
ssi_train_ids <- train_ids %>% filter(ssi) %>%
mutate(procedure_date = ymd_hms(date),
date = floor_date(procedure_date, unit = "day")) %>%
left_join(procedure_ids, by = c("patient_id", "date")) %>%
select(-date) %>%
filter(!is.na(patient_id)) %>%
distinct()
non_ssi_train_ids <- train_ids %>% filter(!ssi) %>%
mutate(procedure_date = ymd_hms(date),
date = floor_date(date, unit = "day")) %>%
left_join(procedure_ids, by = c("patient_id", "date")) %>%
select(-date) %>%
filter(!is.na(patient_id)) %>%
distinct()
# get testing SSI and non-SSI ids
test_ids <- read.csv("../../../data/processed_data/train_test_val_patnums/patnum_test.csv")
ssi_test_ids <- test_ids %>% filter(ssi) %>%
mutate(procedure_date = ymd_hms(date),
date = floor_date(procedure_date, unit = "day")) %>%
left_join(procedure_ids, by = c("patient_id", "date")) %>%
select(-date) %>%
filter(!is.na(patient_id)) %>%
distinct()
non_ssi_test_ids <- test_ids %>% filter(!ssi) %>%
mutate(procedure_date = ymd_hms(date),
date = floor_date(procedure_date, unit = "day")) %>%
left_join(procedure_ids, by = c("patient_id", "date")) %>%
select(-date) %>%
filter(!is.na(patient_id)) %>%
distinct()
# get validation SSI and non-SSI ids
val_ids <- read.csv("../../../data/processed_data/train_test_val_patnums/patnum_val.csv")
ssi_val_ids <- val_ids %>% filter(ssi) %>%
mutate(procedure_date = ymd_hms(date),
date = floor_date(procedure_date, unit = "day")) %>%
left_join(procedure_ids, by = c("patient_id", "date")) %>%
select(-date) %>%
filter(!is.na(patient_id)) %>%
distinct()
non_ssi_val_ids <- val_ids %>% filter(!ssi) %>%
mutate(procedure_date = ymd_hms(date),
date = floor_date(procedure_date, unit = "day")) %>%
left_join(procedure_ids, by = c("patient_id", "date")) %>%
select(-date) %>%
filter(!is.na(patient_id)) %>%
distinct()
writePatientDocuments <- function(ids_df,
subset = c("train", "test", "val"),
ssi = c("ssi", "non_ssi")) {
subset = match.arg(subset)
ssi = match.arg(ssi)
walk(1:nrow(ids_df),
~ {
# extract patient id and procedure date
patient <- ids_df[.x, ]
data_unstructured %>%
filter(patient_id == patient$patient_id) %>%
# filter the year before surgery
filter(date <= patient$procedure_date,
difftime(patient$procedure_date, date, units = "weeks") <= 52) %>%
mutate(floor_date = floor_date(date, unit = "day")) %>%
group_by(floor_date) %>%
summarise(document = paste(results, collapse = " ")) %>%
ungroup() %>%
select(document) %>%
write_csv(paste0("../../../data/processed_data/05_unstructured_data_train_test_val/",
subset, "/", ssi, "/",
patient$patient_id, "_", patient$procedure_id, ".txt"))
})
}
# write training data
writePatientDocuments(ssi_train_ids, "train", "ssi")
head(data_unstructured)
ids_df <- ssi_train_ids
patient <- ssi_train_ids[1, ]
head(data_unstructured %>%
filter(patient_id == patient$patient_id) %>%
# filter the year before surgery
filter(date <= patient$procedure_date,
difftime(patient$procedure_date, date, units = "weeks") <= 52) %>%
mutate(floor_date = floor_date(date, unit = "day")) %>%
group_by(floor_date) %>%
summarise(document = paste(results, collapse = " ")) %>%
ungroup() %>%
select(document))
data_unstructured %>%
filter(patient_id == patient$patient_id) %>%
# filter the year before surgery
filter(date <= patient$procedure_date,
difftime(patient$procedure_date, date, units = "weeks") <= 52) %>%
# mutate(floor_date = floor_date(date, unit = "day")) %>%
# group_by(floor_date) %>%
summarise(document = paste(results, collapse = " ")) %>%
ungroup() %>%
select(document)
writePatientDocuments <- function(ids_df,
subset = c("train", "test", "val"),
ssi = c("ssi", "non_ssi")) {
subset = match.arg(subset)
ssi = match.arg(ssi)
walk(1:nrow(ids_df),
~ {
# extract patient id and procedure date
patient <- ids_df[.x, ]
data_unstructured %>%
filter(patient_id == patient$patient_id) %>%
# filter the year before surgery
filter(date <= patient$procedure_date,
difftime(patient$procedure_date, date, units = "weeks") <= 52) %>%
# mutate(floor_date = floor_date(date, unit = "day")) %>%
# group_by(floor_date) %>%
summarise(document = paste(results, collapse = " ")) %>%
ungroup() %>%
select(document) %>%
write_csv(paste0("../../../data/processed_data/05_unstructured_data_train_test_val/",
subset, "/", ssi, "/",
patient$patient_id, "_", patient$procedure_id, ".txt"))
})
}
# write training data
writePatientDocuments(ssi_train_ids, "train", "ssi")
writePatientDocuments(non_ssi_train_ids, "train", "non_ssi")
filename
training_ssi_files
training_ssi_files
# indicate where the data lives
path <- "../../../data/processed_data/05_unstructured_data_train_test_val/train/ssi/"
training_ssi_files <- list.files(path)
training_ssi_files
training_ssi_files[1]
filename <- "33098396_19384917.txt"
read.delim(paste0(path, filename), sep = " ")
read.delim(paste0(path, filename), sep = " ", header = FALSE)
read.delim(paste0(path, filename), sep = " ", header = FALSE, skip = 1)
writePatientDocuments <- function(ids_df,
subset = c("train", "test", "val"),
ssi = c("ssi", "non_ssi")) {
subset = match.arg(subset)
ssi = match.arg(ssi)
walk(1:nrow(ids_df),
~ {
# extract patient id and procedure date
patient <- ids_df[.x, ]
data_unstructured %>%
filter(patient_id == patient$patient_id) %>%
# filter the year before surgery
filter(date <= patient$procedure_date,
difftime(patient$procedure_date, date, units = "weeks") <= 52) %>%
# uncomment if you want to have one line per day
# mutate(floor_date = floor_date(date, unit = "day")) %>%
# group_by(floor_date) %>%
summarise(document = paste(results, collapse = " ")) %>%
ungroup() %>%
select(document) %>%
write_csv(paste0("../../../data/processed_data/05_unstructured_data_train_test_val/",
subset, "/", ssi, "/",
patient$patient_id, "_", patient$procedure_id, ".txt"))
})
}
# write training data
writePatientDocuments(ssi_train_ids, "train", "ssi")
writePatientDocuments(non_ssi_train_ids, "train", "non_ssi")
# write testing data
writePatientDocuments(ssi_test_ids, "test", "ssi")
writePatientDocuments(non_ssi_test_ids, "test", "non_ssi")
# write validation data
writePatientDocuments(ssi_val_ids, "val", "ssi")
writePatientDocuments(non_ssi_val_ids, "val", "non_ssi")
library(r2d3)
install.packages("r2d3")
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
blogdown::serve_site()
blogdown::stop_server()
