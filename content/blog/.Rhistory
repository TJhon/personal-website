theme(legend.position = "none") +
theme_book
# Chunk 5: derivative
x <- seq(-10, 10, 0.5)
df <- data.frame(x = x, y = x^2)
ggplot(df) + geom_line(aes(x = x, y = y)) +
geom_abline(intercept = -25, slope = -10, col = "cornflowerblue") +
geom_point(aes(x = x, y = y),
col = "cornflowerblue", data = data.frame(x = -5, y = 25), size = 2) +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = -4, y = 25, label = "(-5, 25)"), family = "Avenir") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = -5, y = 21, label = "slope = -10"),
family = "Avenir", color = "cornflowerblue", angle = -45) +
geom_abline(intercept = 0, slope = 0, col = "orange") +
geom_point(aes(x = x, y = y),
col = "orange", data = data.frame(x = 0, y = 0), size = 2) +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 0, y = 3, label = "(0, 0)"), family = "Avenir") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 0, y = -3, label = "slope = 0"),
family = "Avenir", color = "orange") +
geom_abline(intercept = -16, slope = 8, col = "pink") +
geom_point(aes(x = x, y = y),
col = "pink", data = data.frame(x = 4, y = 16), size = 2) +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 3, y = 17, label = "(4, 16)"), family = "Avenir") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 4, y = 12, label = "slope = 8"),
family = "Avenir", angle = 40, color = "pink") +
theme_book +
coord_fixed(ratio = 0.1)
# Chunk 6: abs-quad
df_abs <- data.frame(x = x, y = abs(x))
g_sq <- ggplot(df) + geom_line(aes(x = x, y = y)) + theme_book + ggtitle(expression("y = x^2"))
g_abs <- ggplot(df_abs) + geom_line(aes(x = x, y = y)) + theme_book + ggtitle(expression("y = |x|"))
gridExtra::grid.arrange(g_sq, g_abs, ncol = 2)
# Chunk 7
ames_prices_train <- ames_prices_train %>%
mutate(price_binary = as.numeric(SalePrice > 160000))
ames_prices_val <- ames_prices_val %>%
mutate(price_binary = as.numeric(SalePrice > 160000))
prices_binary_ols <- lm(price_binary ~ Gr.Liv.Area, ames_prices_train)
# Chunk 8
ames_nbhds_prices_train <- ames_prices_train %>%
filter(Neighborhood %in% c("NAmes", "NridgHt",
"OldTown", "Edwards",
"Somerst", "Gilbert"))
prices_ols_multi <- lm(SalePrice ~ Gr.Liv.Area + Overall.Qual +
Year.Built + Neighborhood,
data = ames_nbhds_prices_train)
summary(prices_ols_multi)
# Chunk 9
ols_accuracy <- ames_nbhds_prices_train %>%
select(true_prices = SalePrice) %>%
mutate(pred_prices = predict(prices_ols, ames_nbhds_prices_train),
pred_multi_prices = predict(prices_ols_multi, ames_nbhds_prices_train))
ols_summary <- ols_accuracy %>%
summarise(mse = mean((pred_prices - true_prices)^2),
mse_multi = mean((pred_multi_prices - true_prices)^2))
# Chunk 10
# calculate prediction accuracy for simple regression
ames_nbhds_prices_train$pred_price_binary = as.numeric(predict(prices_binary_ols,
ames_nbhds_prices_train) > 0.5)
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_binary) %>%
table
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
# calculate prediction accuracy for multiple regression
prices_binary_ols_multi <- lm(price_binary ~ Gr.Liv.Area + Year.Built +
Overall.Qual + Neighborhood,
ames_nbhds_prices_train)
ames_nbhds_prices_train$pred_price_multi_binary = as.numeric(predict(prices_binary_ols_multi,
ames_nbhds_prices_train) > 0.5)
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_multi_binary) %>%
table
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
# Chunk 11
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_binary) %>%
table
# print confusion matrix
rownames(confusion) <- c("predicted below $160K", "predicted above $160K")
colnames(confusion) <- c("true below $160K", "true above $160K")
kable(confusion)
ames_nbhds_prices_val %>%
summarise(mse = mean((pred_price - SalePrice)^2),
mse_multi = mean((pred_price_multi - SalePrice)^2),
binary_error = sum(as.numeric(pred_price_binary > 0.5) == price_binary) / n(),
binary_error_multi = sum(as.numeric(pred_price_binary_multi > 0.5) == price_binary) / n())
# make predictions on the validation set
ames_nbhds_prices_val <- ames_prices_val %>%
filter(Neighborhood %in% c("NAmes", "NridgHt",
"OldTown", "Edwards",
"Somerst", "Gilbert"))
ames_nbhds_prices_val$pred_price <- predict(prices_ols,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_multi <- predict(prices_ols_multi,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_binary <- predict(prices_binary_ols,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_binary_multi <- predict(prices_binary_ols_multi,
ames_nbhds_prices_val)
ames_nbhds_prices_val %>%
summarise(mse = mean((pred_price - SalePrice)^2),
mse_multi = mean((pred_price_multi - SalePrice)^2),
binary_error = sum(as.numeric(pred_price_binary > 0.5) == price_binary) / n(),
binary_error_multi = sum(as.numeric(pred_price_binary_multi > 0.5) == price_binary) / n())
# Chunk 1
# load in the ames prices dataset
ames_prices <- read.table("Data/Ames/AmesHousing.txt",
sep = "\t", header = T)
# split into training, testing and validation
set.seed(23423484)
ames_prices_train <- ames_prices %>% sample_frac(0.7)
ames_prices_val <- ames_prices %>%
filter(!(PID %in% ames_prices_train$PID)) %>%
sample_frac(0.5)
ames_prices_test <- ames_prices %>%
filter(!(PID %in% c(ames_prices_train$PID, ames_prices_val$PID)))
# check that the proportions are correct
c(nrow(ames_prices_train), nrow(ames_prices_val), nrow(ames_prices_test))
# remove the original so I don't accidentally use it
rm(ames_prices)
# Chunk 2: ames-scatter
library(ggplot2)
library(plotly)
scatter <- ames_prices_train %>% ggplot() +
geom_point(aes(x =`Gr.Liv.Area`, y = `SalePrice`),
alpha = 0.3, color = "grey60") +
scale_y_continuous(name = "Sale Price",
breaks = c(0, 200000, 400000, 600000),
labels = c("$0", "$20,000", "$40,000", "$60,000")) +
scale_x_continuous(name = "Above ground living area (square feet)") +
theme_book
# Chunk 3: price-area-reg
prices_ols <- lm(SalePrice ~ Gr.Liv.Area, data = ames_prices_train)
scatter +
geom_abline(aes(intercept = prices_ols$coefficients[1],
slope = prices_ols$coefficients[2]),
col = "grey40", linetype = "dashed") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 4000, y = 500000,
label = paste0("price = ",
round(prices_ols$coefficients[1]),
" + ",
round(prices_ols$coefficients[2]),
" x area")),
angle = 29, family = "Avenir")
# Chunk 4: ols-squares1
# take a sample from the Ames prices dataset
set.seed(29348781)
ames_sample <- ames_prices_train %>%
sample_n(6) %>%
mutate(SalePrice = SalePrice / 100) %>%
select(`SalePrice`, `Gr.Liv.Area`)
# fit a linear model
ols_sample <- lm(SalePrice ~ `Gr.Liv.Area`, data = ames_sample)
# put the true and predicted results into a data frame
ols_sample_df <- data.frame(id = factor(1:6),
area = ames_sample$`Gr.Liv.Area`,
price = ames_sample$SalePrice,
pred_price = predict(ols_sample,
new.data = ames_sample$`Gr.Liv.Area`))
# plot the vertical distances to the predicted line
ggplot(ols_sample_df) +
geom_abline(aes(intercept = ols_sample$coefficients[1],
slope = ols_sample$coefficients[2]),
col = "grey40", linetype = "dashed") +
geom_rect(aes(xmin = area, xmax = area + abs(price - pred_price),
ymin = price, ymax = pred_price, fill = id), alpha = 0.5) +
geom_segment(aes( x = area, xend = area, y = price, yend = pred_price),
col = "navy", size = 1) +
geom_point(aes(x = area, y = price, col = id), size = 5) +
coord_fixed() +
scale_y_continuous(name = "price ($100)") +
scale_color_discrete(guide = "none") +
scale_fill_discrete(guide = "none") +
theme(legend.position = "none") +
theme_book
# Chunk 5: derivative
x <- seq(-10, 10, 0.5)
df <- data.frame(x = x, y = x^2)
ggplot(df) + geom_line(aes(x = x, y = y)) +
geom_abline(intercept = -25, slope = -10, col = "cornflowerblue") +
geom_point(aes(x = x, y = y),
col = "cornflowerblue", data = data.frame(x = -5, y = 25), size = 2) +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = -4, y = 25, label = "(-5, 25)"), family = "Avenir") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = -5, y = 21, label = "slope = -10"),
family = "Avenir", color = "cornflowerblue", angle = -45) +
geom_abline(intercept = 0, slope = 0, col = "orange") +
geom_point(aes(x = x, y = y),
col = "orange", data = data.frame(x = 0, y = 0), size = 2) +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 0, y = 3, label = "(0, 0)"), family = "Avenir") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 0, y = -3, label = "slope = 0"),
family = "Avenir", color = "orange") +
geom_abline(intercept = -16, slope = 8, col = "pink") +
geom_point(aes(x = x, y = y),
col = "pink", data = data.frame(x = 4, y = 16), size = 2) +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 3, y = 17, label = "(4, 16)"), family = "Avenir") +
geom_text(aes(x = x, y = y, label = label),
data = data.frame(x = 4, y = 12, label = "slope = 8"),
family = "Avenir", angle = 40, color = "pink") +
theme_book +
coord_fixed(ratio = 0.1)
# Chunk 6: abs-quad
df_abs <- data.frame(x = x, y = abs(x))
g_sq <- ggplot(df) + geom_line(aes(x = x, y = y)) + theme_book + ggtitle(expression("y = x^2"))
g_abs <- ggplot(df_abs) + geom_line(aes(x = x, y = y)) + theme_book + ggtitle(expression("y = |x|"))
gridExtra::grid.arrange(g_sq, g_abs, ncol = 2)
# Chunk 7
ames_prices_train <- ames_prices_train %>%
mutate(price_binary = as.numeric(SalePrice > 160000))
ames_prices_val <- ames_prices_val %>%
mutate(price_binary = as.numeric(SalePrice > 160000))
prices_binary_ols <- lm(price_binary ~ Gr.Liv.Area, ames_prices_train)
# Chunk 8
ames_nbhds_prices_train <- ames_prices_train %>%
filter(Neighborhood %in% c("NAmes", "NridgHt",
"OldTown", "Edwards",
"Somerst", "Gilbert"))
prices_ols_multi <- lm(SalePrice ~ Gr.Liv.Area + Overall.Qual +
Year.Built + Neighborhood,
data = ames_nbhds_prices_train)
summary(prices_ols_multi)
# Chunk 9
ols_accuracy <- ames_nbhds_prices_train %>%
select(true_prices = SalePrice) %>%
mutate(pred_prices = predict(prices_ols, ames_nbhds_prices_train),
pred_multi_prices = predict(prices_ols_multi, ames_nbhds_prices_train))
ols_summary <- ols_accuracy %>%
summarise(mse = mean((pred_prices - true_prices)^2),
mse_multi = mean((pred_multi_prices - true_prices)^2))
# Chunk 10
# calculate prediction accuracy for simple regression
ames_nbhds_prices_train$pred_price_binary = as.numeric(predict(prices_binary_ols,
ames_nbhds_prices_train) > 0.5)
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_binary) %>%
table
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
# calculate prediction accuracy for multiple regression
prices_binary_ols_multi <- lm(price_binary ~ Gr.Liv.Area + Year.Built +
Overall.Qual + Neighborhood,
ames_nbhds_prices_train)
ames_nbhds_prices_train$pred_price_multi_binary = as.numeric(predict(prices_binary_ols_multi,
ames_nbhds_prices_train) > 0.5)
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_multi_binary) %>%
table
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
# Chunk 11
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_binary) %>%
table
# print confusion matrix
rownames(confusion) <- c("predicted below $160K", "predicted above $160K")
colnames(confusion) <- c("true below $160K", "true above $160K")
kable(confusion)
# Chunk 12
# make predictions on the validation set
ames_nbhds_prices_val <- ames_prices_val %>%
filter(Neighborhood %in% c("NAmes", "NridgHt",
"OldTown", "Edwards",
"Somerst", "Gilbert"))
ames_nbhds_prices_val$pred_price <- predict(prices_ols,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_multi <- predict(prices_ols_multi,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_binary <- predict(prices_binary_ols,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_binary_multi <- predict(prices_binary_ols_multi,
ames_nbhds_prices_val)
ames_nbhds_prices_val %>%
summarise(mse = mean((pred_price - SalePrice)^2),
mse_multi = mean((pred_price_multi - SalePrice)^2),
binary_error = sum(as.numeric(pred_price_binary > 0.5) == price_binary) / n(),
binary_error_multi = sum(as.numeric(pred_price_binary_multi > 0.5) == price_binary) / n())
# Chunk 13
ols_plot <- ggplot(ols_accuracy) +
geom_point(aes(x = true_prices / 1000, y = pred_prices / 1000),
alpha = 0.5, col = "grey40") +
geom_abline(intercept = 0, slope = 1, col = "grey50") +
theme_classic() +
theme(axis.text = element_text(family = "Avenir"),
axis.title = element_text(family = "Avenir")) +
scale_x_continuous(name = "True sale price ($1,000)", limits = c(0, 650)) +
scale_y_continuous(name = "Predicted sale price ($1,000)", limits = c(0, 650)) +
ggtitle("OLS prediction based on area only")
ols_plot_multi <- ggplot(ols_accuracy) +
geom_point(aes(x = true_prices / 1000, y = pred_multi_prices / 1000),
alpha = 0.5, col = "grey40") +
geom_abline(intercept = 0, slope = 1, col = "grey50") +
theme_classic() +
theme(axis.text = element_text(family = "Avenir"),
axis.title = element_text(family = "Avenir")) +
scale_x_continuous(name = "True sale price ($1,000)", limits = c(0, 650)) +
scale_y_continuous(name = "Predicted sale price ($1,000)", limits = c(0, 650)) +
ggtitle("OLS prediction based on area, house quality,\nyear built and neighborhood")
gridExtra::grid.arrange(ols_plot, ols_plot_multi, ncol = 2)
# make predictions on the validation set
ames_nbhds_prices_val <- ames_prices_val %>%
filter(Neighborhood %in% c("NAmes", "NridgHt",
"OldTown", "Edwards",
"Somerst", "Gilbert"))
ames_nbhds_prices_val$pred_price <- predict(prices_ols,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_multi <- predict(prices_ols_multi,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_binary <- predict(prices_binary_ols,
ames_nbhds_prices_val)
ames_nbhds_prices_val$pred_price_binary_multi <- predict(prices_binary_ols_multi,
ames_nbhds_prices_val)
ames_nbhds_prices_val %>%
summarise(mse = mean((pred_price - SalePrice)^2),
mse_multi = mean((pred_price_multi - SalePrice)^2),
binary_error = sum(as.numeric(pred_price_binary > 0.5) == price_binary) / n(),
binary_error_multi = sum(as.numeric(pred_price_binary_multi > 0.5) == price_binary) / n())
ols_summary
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
# calculate prediction accuracy for simple regression
ames_nbhds_prices_train$pred_price_binary = as.numeric(predict(prices_binary_ols,
ames_nbhds_prices_train) > 0.5)
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_binary) %>%
table
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
# calculate prediction accuracy for multiple regression
prices_binary_ols_multi <- lm(price_binary ~ Gr.Liv.Area + Year.Built +
Overall.Qual + Neighborhood,
ames_nbhds_prices_train)
ames_nbhds_prices_train$pred_price_multi_binary = as.numeric(predict(prices_binary_ols_multi,
ames_nbhds_prices_train) > 0.5)
confusion <- ames_nbhds_prices_train %>% select(price_binary,
pred_price_multi_binary) %>%
table
confusion %>% diag %>% sum / nrow(ames_nbhds_prices_train)
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
set.seed(211574)
# isolate a single house from among the more expensive ones
expensive.houses <- ames_prices_train %>% filter(SalePrice > 300000)
selected.point <- expensive.houses[sample(1:nrow(expensive.houses), 1), ]
selected.point$label <- "(list(area[i], price[i])) == (list(area[i], a + b %*% area[i] + e[i]))"
selected.point$pred_label <- "(list(area[i], a + b %*% area[i]))"
# plot the original scatterplot and line and highlight the point of interest
ames_prices_train %>%
ggplot() +
geom_point(aes(x =`Gr.Liv.Area`, y = `SalePrice` / 1000),
alpha = 0.4, color = "grey60") +
# add point and label it
geom_point(aes(x = `Gr.Liv.Area`, y = `SalePrice` / 1000),
col = "grey20", size = 3, data = selected.point) +
geom_text(aes(x = `Gr.Liv.Area`, y = `SalePrice` / 1000 + 50, label = label),
col = "grey20", size = 4, data = selected.point,
parse = T, family = "Avenir") +
# add predicted point and label it
geom_point(aes(x = `Gr.Liv.Area`, y = 13.29 + 0.112 * `Gr.Liv.Area`),
col = "grey20", size = 2, data = selected.point) +
geom_text(aes(x = `Gr.Liv.Area`, y = 13.29 + 0.112 * `Gr.Liv.Area` - 40,
label = pred_label),
col = "grey20", size = 4, data = selected.point,
parse = T, family = "Avenir") +
# add a line from the point to it's corresponding prediction on the line
geom_segment(aes(x =  `Gr.Liv.Area`, xend = `Gr.Liv.Area`,
y = `SalePrice` / 1000, yend = 13.290 + 0.112 * Gr.Liv.Area),
data = selected.point) +
theme(legend.position = "none") +
scale_y_continuous(name = "Sale Price ($1000 USD)") +
scale_x_continuous(name = "Above ground living area (square feet)") +
theme_book +
geom_abline(aes(intercept = ols$coefficients[1],
slope = ols$coefficients[2]),
col = "grey40", linetype = "dashed")
# plot the original scatterplot and line and highlight the point of interest
ames_prices_train %>%
ggplot() +
geom_point(aes(x =`Gr.Liv.Area`, y = `SalePrice` / 1000),
alpha = 0.4, color = "grey60") +
# add point and label it
geom_point(aes(x = `Gr.Liv.Area`, y = `SalePrice` / 1000),
col = "grey20", size = 3, data = selected.point) +
geom_text(aes(x = `Gr.Liv.Area`, y = `SalePrice` / 1000 + 50, label = label),
col = "grey20", size = 4, data = selected.point,
parse = T, family = "Avenir") +
# add predicted point and label it
geom_point(aes(x = `Gr.Liv.Area`, y = 13.29 + 0.112 * `Gr.Liv.Area`),
col = "grey20", size = 2, data = selected.point) +
geom_text(aes(x = `Gr.Liv.Area`, y = 13.29 + 0.112 * `Gr.Liv.Area` - 40,
label = pred_label),
col = "grey20", size = 4, data = selected.point,
parse = T, family = "Avenir") +
# add a line from the point to it's corresponding prediction on the line
geom_segment(aes(x =  `Gr.Liv.Area`, xend = `Gr.Liv.Area`,
y = `SalePrice` / 1000, yend = 13.290 + 0.112 * Gr.Liv.Area),
data = selected.point) +
theme(legend.position = "none") +
scale_y_continuous(name = "Sale Price ($1000 USD)") +
scale_x_continuous(name = "Above ground living area (square feet)") +
theme_book +
geom_abline(aes(intercept = prices_ols$coefficients[1],
slope = prices_ols$coefficients[2]),
col = "grey40", linetype = "dashed")
set.seed(2374891)
# calculate 1000 bootstrapped estimated of a and b
coefficients.boot <- sapply(1:1000, function(i) {
# draw a bootstrap sample
bootstrap.index <- sample(1:nrow(ames_prices_train), replace = TRUE)
# filter to the bootstrapped dataset
ames_prices_train.boot <- ames_prices_train[bootstrap.index, ]
# run the regression
lm.boot <- lm(SalePrice ~ Gr.Liv.Area, data = ames_prices_train.boot)
lm.boot$coefficients
})
# transpose the matrix and convert to a data frame
coefficients.boot <- data.frame(a = coefficients.boot[1, ],
b = coefficients.boot[2, ])
library(latex2exp)
gg_a_boot <- ggplot(coefficients.boot) +
geom_histogram(aes(x = a), col = "white", binwidth = 1500) +
theme_book +
scale_x_continuous(name = TeX("\\hat{a}")) +
geom_vline(xintercept = ols$coefficients[1] * 1000, col = "red", size = 1.5) +
geom_vline(xintercept = mean(coefficients.boot$a),
col = "cornflowerblue", size = 1.5, linetype = "dashed")
gg_b_boot <- ggplot(coefficients.boot) +
geom_histogram(aes(x = b), col = "white", binwidth = 1) +
theme_book +
scale_x_continuous(name = TeX("\\hat{b}")) +
geom_vline(xintercept = ols$coefficients[2] * 1000, col = "red", size = 1.5) +
geom_vline(xintercept = mean(coefficients.boot$b),
col = "cornflowerblue", size = 1.5, linetype = "dashed")
gridExtra::grid.arrange(gg_a_boot, gg_b_boot, ncol = 2)
# Chunk 1: deviations
set.seed(211574)
# isolate a single house from among the more expensive ones
expensive.houses <- ames_prices_train %>% filter(SalePrice > 300000)
selected.point <- expensive.houses[sample(1:nrow(expensive.houses), 1), ]
selected.point$label <- "(list(area[i], price[i])) == (list(area[i], a + b %*% area[i] + e[i]))"
selected.point$pred_label <- "(list(area[i], a + b %*% area[i]))"
# plot the original scatterplot and line and highlight the point of interest
ames_prices_train %>%
ggplot() +
geom_point(aes(x =`Gr.Liv.Area`, y = `SalePrice` / 1000),
alpha = 0.4, color = "grey60") +
# add point and label it
geom_point(aes(x = `Gr.Liv.Area`, y = `SalePrice` / 1000),
col = "grey20", size = 3, data = selected.point) +
geom_text(aes(x = `Gr.Liv.Area`, y = `SalePrice` / 1000 + 50, label = label),
col = "grey20", size = 4, data = selected.point,
parse = T, family = "Avenir") +
# add predicted point and label it
geom_point(aes(x = `Gr.Liv.Area`, y = 13.29 + 0.112 * `Gr.Liv.Area`),
col = "grey20", size = 2, data = selected.point) +
geom_text(aes(x = `Gr.Liv.Area`, y = 13.29 + 0.112 * `Gr.Liv.Area` - 40,
label = pred_label),
col = "grey20", size = 4, data = selected.point,
parse = T, family = "Avenir") +
# add a line from the point to it's corresponding prediction on the line
geom_segment(aes(x =  `Gr.Liv.Area`, xend = `Gr.Liv.Area`,
y = `SalePrice` / 1000, yend = 13.290 + 0.112 * Gr.Liv.Area),
data = selected.point) +
theme(legend.position = "none") +
scale_y_continuous(name = "Sale Price ($1000 USD)") +
scale_x_continuous(name = "Above ground living area (square feet)") +
theme_book +
geom_abline(aes(intercept = prices_ols$coefficients[1],
slope = prices_ols$coefficients[2]),
col = "grey40", linetype = "dashed")
# Chunk 2: ames-bootstrap
set.seed(2374891)
# calculate 1000 bootstrapped estimated of a and b
coefficients.boot <- sapply(1:1000, function(i) {
# draw a bootstrap sample
bootstrap.index <- sample(1:nrow(ames_prices_train), replace = TRUE)
# filter to the bootstrapped dataset
ames_prices_train.boot <- ames_prices_train[bootstrap.index, ]
# run the regression
lm.boot <- lm(SalePrice ~ Gr.Liv.Area, data = ames_prices_train.boot)
lm.boot$coefficients
})
# transpose the matrix and convert to a data frame
coefficients.boot <- data.frame(a = coefficients.boot[1, ],
b = coefficients.boot[2, ])
# Chunk 3: plot-boot-ames
library(latex2exp)
gg_a_boot <- ggplot(coefficients.boot) +
geom_histogram(aes(x = a), col = "white", binwidth = 1500) +
theme_book +
scale_x_continuous(name = TeX("\\hat{a}")) +
geom_vline(xintercept = prices_ols$coefficients[1] * 1000, col = "red", size = 1.5) +
geom_vline(xintercept = mean(coefficients.boot$a),
col = "cornflowerblue", size = 1.5, linetype = "dashed")
gg_b_boot <- ggplot(coefficients.boot) +
geom_histogram(aes(x = b), col = "white", binwidth = 1) +
theme_book +
scale_x_continuous(name = TeX("\\hat{b}")) +
geom_vline(xintercept = prices_ols$coefficients[2] * 1000, col = "red", size = 1.5) +
geom_vline(xintercept = mean(coefficients.boot$b),
col = "cornflowerblue", size = 1.5, linetype = "dashed")
gridExtra::grid.arrange(gg_a_boot, gg_b_boot, ncol = 2)
bookdown::render_book("index.Rmd", bookdown::gitbook(split_by = 'section+number'))
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
blogdown::serve_site()
stop_server()
blogdown::stop_server()
