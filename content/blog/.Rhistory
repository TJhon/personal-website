bookdown::preview_chapter("03-data-cleaning.Rmd", "bookdown::pdf_book")
bookdown::preview_chapter("07-ls.Rmd", "bookdown::pdf_book")
bookdown::preview_chapter("07-ls.Rmd", "bookdown::pdf_book")
bookdown::preview_chapter("07-ls.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
setwd("~/Dropbox/bookdown_empty")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
pty
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::preview_chapter("03-data-cleaning.Rmd", "bookdown::pdf_book")
setwd("~/Dropbox/bookdown")
bookdown::preview_chapter("03-data-cleaning.Rmd", "bookdown::pdf_book")
bookdown::preview_chapter("07-ls.Rmd", "bookdown::pdf_book")
bookdown::preview_chapter("07-ls.Rmd", "bookdown::pdf_book")
?fit_split
?vip
??vip
??workflow
?workflow
setwd("~/Google Drive/Personal webpage/personal-website-netlify/content/blog")
blogdown::serve_site()
measles <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-25/measles.csv')
head(measles)
devtools::install_github("thebioengineer/tidytuesdayR")
library(tidyverse)
board_games <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
board_games
board_games %>% as.data.frame()
board_games %>% print(width = Inf)
# look at the first 10 rows
board_games %>% print(width = 10)
# look at the first 10 rows
board_games %>% print(width = Inf)
# create a simplified version of the data for this tutorial
board_games <- board_games_orig %>%
select(name, max_players, max_playtime, min_age,
playing_time, year_published, category, average_rating)
# load the board games data
board_games_orig <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
# create a simplified version of the data for this tutorial
board_games <- board_games_orig %>%
select(name, max_players, max_playtime, min_age,
playing_time, year_published, category, average_rating)
# look at the dataset
board_games %>%
# width = Inf avoids suppressing additional variables in the tibble
print(width = Inf)
board_games %>% filter(name == "Snakes and Ladders")
board_games %>% filter(name == "Chess")
board_games %>% filter(name == "Settlers of Catan")
board_games %>% unique(name)
board_games %>% filter(str_detect(tolower(name), "snakes"))
board_games %>% filter(str_detect(tolower(name), "snake"))
board_games %>% filter(str_detect(tolower(name), "chess"))
board_games %>% filter(str_detect(tolower(name), "catan"))
board_games %>% filter(str_detect(tolower(name), "catan")) %>% as.data.frame()
board_games %>% filter(str_detect(tolower(name), "Settlers of Catan")) %>% as.data.frame()
board_games %>% filter(str_detect(tolower(name), "settlers of catan")) %>% as.data.frame()
board_games %>% filter(str_detect(tolower(name), "settlers")) %>% as.data.frame()
board_games %>% filter(str_detect(tolower(name), "settlers of catan")) %>% as.data.frame()
board_games %>% filter(str_detect(tolower(name), "ladders")) %>% as.data.frame()
board_games %>% filter(str_detect(tolower(name), "settlers of catan"))
board_games %>%
filter(str_detect(tolower(name), "settlers of catan")) %>%
print(width = Inf)
board_games %>%
# filter to rows whose name includes "Settlers of Catan"
filter(str_detect(name, "Settlers of Catan")) %>%
print(width = Inf)
board_games %>% filter(str_detect(tolower(name), "splendor")) %>% as.data.frame()
board_games %>%
separate(category, sep = ",")
board_games %>%
separate(category, categories, sep = ",")
board_games %>%
separate(category, into = categories, sep = ",")
?separate
board_games %>%
separate(category, paste0('col', c(1:10)), sep = ",")
board_games %>%
separate(category, paste0('col', c(1:10)), sep = ",") %>%
print(width = Inf)
board_games %>%
separate(category, paste0('col', c(1:13)), sep = ",") %>%
print(width = Inf)
board_games %>%
separate(category, paste0('col', c(1:14)), sep = ",") %>%
print(width = Inf)
board_games$category
board_games %>% pull(category)
board_games %>% pull(category) %>% str_split(",")
board_games %>% pull(category) %>% str_split(",") %>% unlist %>% unique
# extract the unique categories
categories <- board_games %>%
pull(category) %>%
str_split(",") %>%
unlist %>%
unique
categories
# extract the unique categories
categories <- board_games %>%
pull(category) %>%
str_split(",") %>%
unlist() %>%
count()
board_games %>%
pull(category) %>%
str_split(",") %>%
unlist()
board_games %>%
pull(category) %>%
str_split(",")
# extract the unique categories
categories <- board_games %>%
pull(category) %>%
str_split(",") %>%
unlist() %>%
table()
# extract the unique categories
board_games %>%
pull(category) %>%
str_split(",") %>%
unlist() %>%
table()
# extract the unique categories
board_games %>%
pull(category) %>%
str_split(",") %>%
unlist() %>%
table() %>%
sort
# extract the unique categories
board_games %>%
pull(category) %>%
str_split(",") %>%
unlist() %>%
table() %>%
sort(decreasing = TRUE)
head(board_games)
# extract the unique categories
board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(10)
# extract the unique categories
board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(20)
# extract the unique categories
board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(15)
# extract the unique categories
board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(13)
# extract the unique categories
board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(15)
# extract the unique categories
categories <- board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(15)
categories
board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
print(width = Inf)
board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
print(width = Inf) %>% map_dbl(sum)
board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
map_dbl(sum)
board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
summarise_if(is.logical, sum)
board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
summarise_if(is.logical, sum, na.rm = T)
board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
summarise_if(is.logical, sum, na.rm = T) %>% as.data.frame
# choose just a few categories
board_games <- board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
select(-category)
board_games %>% print(width = Inf)
# Chunk 1
library(tidymodels)
# Chunk 2
library(tidyverse)
# load the board games data
board_games_orig <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
# create a simplified version of the data for this tutorial
board_games <- board_games_orig %>%
select(name, max_players, max_playtime, min_age,
playing_time, year_published, category, average_rating)
# Chunk 3
# look at the dataset
board_games %>%
# width = Inf avoids suppressing additional variables in the tibble
# and prints out all character variables to their full length
print(width = Inf)
# Chunk 4
board_games %>%
# filter to rows whose name includes "Settlers of Catan"
filter(str_detect(name, "Settlers of Catan")) %>%
print(width = Inf)
# Chunk 5
# extract the top 15 categories
categories <- board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(15)
categories
# Chunk 6
# choose just a few categories
board_games <- board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
select(-category)
board_games %>% print(width = Inf)
lm(average_rating ~ , data = select(board_games, -name))
lm(average_rating ~ ., data = select(board_games, -name))
lm(average_rating ~ ., data = select(board_games, -name)) %>% summary
board_games %>% select(playing_time)
board_games %>% select(playing_time) %>% sample_n(10)
board_games %>% select(playing_time) %>% sample_n(10)
board_games %>% select(playing_time) %>% sample_n(10)
board_games %>% select(playing_time) %>% sample_n(10)
board_games %>% select(playing_time) %>% sample_n(10)
board_games %>% map_dbl(sum(is.na(.)))
board_games %>% summary_if(is.numeric, ~sum(is.na(.)))
board_games %>% summarise_if(is.numeric, ~sum(is.na(.)))
??parsnip
?fit
?initial_split
ames_split  <- initial_split(board_games,
# break into three sets
breaks = 3)
ames_split
# split the board games data into three sets
board_games_split  <- initial_split(board_games,
# split data into 3 subsets
breaks = 3)
board_games_split
# Chunk 1
library(tidymodels)
# Chunk 2
library(tidyverse)
# load the board games data
board_games_orig <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv")
# create a simplified version of the data for this tutorial
board_games <- board_games_orig %>%
select(name, max_players, max_playtime, min_age,
playing_time, year_published, category, average_rating)
# Chunk 3
# look at the dataset
board_games %>%
# width = Inf avoids suppressing additional variables in the tibble
# and prints out all character variables to their full length
print(width = Inf)
# Chunk 4
board_games %>%
# filter to rows whose name includes "Settlers of Catan"
filter(str_detect(name, "Settlers of Catan")) %>%
print(width = Inf)
# Chunk 5
# extract the top 15 categories
categories <- board_games %>%
# extract the category variable
pull(category) %>%
# separate the entires by ","
str_split(",") %>%
# convert the list of vectors to a single vector
unlist() %>%
# count the number of times each entry occurs
table() %>%
# arrange in decreasing order of prevalence
sort(decreasing = TRUE) %>%
head(15)
categories
# Chunk 6
# choose just a few categories
board_games <- board_games %>%
mutate(category_card_game = str_detect(category, "Card Game"),
category_war_game = str_detect(category, "Wargame"),
category_fantasy = str_detect(category, "Fantasy"),
category_fighting = str_detect(category, "Fighting"),
category_economic = str_detect(category, "Economic"),
category_scifi = str_detect(category, "Science Fiction"),
category_dice = str_detect(category, "Dice"),
category_party = str_detect(category, "Party Game"),
category_strategy = str_detect(category, "Abstract Strategy"),
category_children = str_detect(category, "Children's Game"),
category_ww2 = str_detect(category, "World War II"),
category_bluffing = str_detect(category, "Bluffing"),
category_humor = str_detect(category, "Humor"),
category_animals = str_detect(category, "Animals"),
category_adventure = str_detect(category, "Adventure")) %>%
select(-category)
board_games %>% print(width = Inf)
# set the seed so you get the same results as me
set.seed(100)
# split the board games data into three sets
board_games_split  <- initial_split(board_games,
# split data into 3 subsets
breaks = 3)
board_games_split
dim(board_games)
??rsample
?fit_split
library(tidymodels)
?fit_split
??fit_split
library(tune)
install.packages("tune")
install.packages("tune")
update.packages("tidymodels")
?fit_split
??fit_split
library(tune)
