<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Rebecca Barter</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Rebecca Barter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jan 2019 23:13:14 -0500</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mutate_all(), select_if(), summarise_at()... what&#39;s the deal with scoped verbs?!</title>
      <link>/blog/2019-01-23_scoped-verbs/</link>
      <pubDate>Wed, 23 Jan 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-01-23_scoped-verbs/</guid>
      <description>A quick useful aside: Using shorthand for functions The _if() scoped variant: perform an operation on variables that satisfy a logical criteria select_if() rename_if() mutate_if() summarise_if()  The _at() scoped variant: perform an operation only on variables specified by name Select helpers rename_at() mutate_at() summarise_at()  The _all() scoped variant: perform an operation on all variables at once rename_all() mutate_all() summarise_all()  Conclusion   I often find myself wishing that I could apply the same mutate function to several columns in a data frame at once, such as convert all factors to characters, or do something to all columns that have missing values, or select all variables whose names end with _important.</description>
    </item>
    
    <item>
      <title>Getting fancy with ggplot2: code for alternatives to grouped bar charts</title>
      <link>/blog/2018-05-29_getting_fancy_ggplot2/</link>
      <pubDate>Tue, 29 May 2018 23:13:14 -0500</pubDate>
      
      <guid>/blog/2018-05-29_getting_fancy_ggplot2/</guid>
      <description>Here I provide the code I used to create the figures from my previous post on alternatives to grouped bar charts. You are encouraged to play with them yourself!
The key to creating unique and creative visualizations using libraries such as ggplot (or even just straight SVG) is (1) to move away from thinking of data visualization only as the default plot types (bar plots, boxplots, scatterplots, etc), and (2) to realise that most visualizations are essentially lines and circles that you can arrange however you desire in space.</description>
    </item>
    
    <item>
      <title>Alternatives to grouped bar charts</title>
      <link>/blog/2018-05-29_alternatives_dodged_bars/</link>
      <pubDate>Tue, 29 May 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/2018-05-29_alternatives_dodged_bars/</guid>
      <description>At some point in your life you have probably found yourself standing face-to-face with a beast known as a grouped bar chart. Perhaps it was in a research paper where the authors were trying to compare the results of several models across different datasets, or it was in a talk given by a colleague who was trying to compare the popularity of different products among distinct groups of consumers.
The first time you encountered a grouped bar chart you might have thought “what a neat way to put so much information in a single plot!</description>
    </item>
    
    <item>
      <title>ggplot2: Mastering the basics</title>
      <link>/blog/2017-11-17-ggplot2_tutorial/</link>
      <pubDate>Fri, 17 Nov 2017 22:13:14 -0500</pubDate>
      
      <guid>/blog/2017-11-17-ggplot2_tutorial/</guid>
      <description>An interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/ggplot2-thw. Feel free to download it and use for your own learning or teaching adventures!
Useful resources for learning ggplot2  ggplot2 book (https://www.amazon.com/dp/0387981403/ref=cm_sw_su_dp?tag=ggplot2-20) by Hadley Wickham The layered grammar of graphics (http://vita.had.co.nz/papers/layered-grammar.pdf) by Hadley Wickham   Materials outline I will begin by providing an overview of the layered grammar of graphics upon which ggplot2 is built. I will then teach ggplot2 by layering examples on top of one another.</description>
    </item>
    
    <item>
      <title>A basic tutorial of caret: the machine learning package in R</title>
      <link>/blog/2017-11-17-caret_tutorial/</link>
      <pubDate>Fri, 17 Nov 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-11-17-caret_tutorial/</guid>
      <description>Note: This tutorial was based on an older version of the abalone data that had a binary old varibale rather than a numeric age variable. It has been modified lightly so that it uses a manual old variable (is the abalone older than 10 or not) and ignores the numeric age variable.
Materials prepared by Rebecca Barter. Package developed by Max Kuhn.
An interactive Jupyter Notebook version of this tutorial can be found at https://github.</description>
    </item>
    
    <item>
      <title>A Basic Data Science Workflow</title>
      <link>/blog/2017-08-16-data-science-workflow/</link>
      <pubDate>Fri, 18 Aug 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-08-16-data-science-workflow/</guid>
      <description>Developing a seamless, clean workflow for data analysis is harder than it sounds, especially because this is something that is almost never explicitly taught. Apparently we are all just supposed to “figure it out for ourselves”. For most of us, when we start our first few analysis projects, we basically have no idea how we are going to structure all of our files, or even what files we will need to make.</description>
    </item>
    
    <item>
      <title>Coolors: choosing color schemes</title>
      <link>/blog/2017-06-27-colors/</link>
      <pubDate>Tue, 27 Jun 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-06-27-colors/</guid>
      <description>Choosing a color palette for a visualization can be one of the most time consuming parts for perfectionists like me. It can be surprisingly difficult to decide on a palette that is both visually appealing and practical, but fortunately there do exist websites to help!
For example, Coolors shoots random, appealing, color palettes at you and you can swipe from one to the next with a hit of a space-bar.</description>
    </item>
    
    <item>
      <title>Interactive visualization in R</title>
      <link>/blog/2017-04-20-interactive/</link>
      <pubDate>Thu, 20 Apr 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-04-20-interactive/</guid>
      <description>Last week I gave an SGSA seminar on interactive visualizations in R.
Here is a long-form version of the talk.
Why be interactive? Interactivity allows the viewer to engage with your data in ways impossible by static graphs. With an interactive plot, the viewer can zoom into the areas the care about, highlight the data points that are relevant to them and hide the information that isn’t.</description>
    </item>
    
    <item>
      <title>Docathon: A Week of Doumentation</title>
      <link>/blog/2017-03-7-docathon/</link>
      <pubDate>Tue, 07 Mar 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-03-7-docathon/</guid>
      <description>This week is the Docathon at BIDS (a.k.a. that wonderful place that I spend all my time).
A docathon is like a hackathon but is focused on developing material and tools for documentation. We have loads of projects signed up to receive some documentation-love and an impressive number of excited participants!
We kicked off the event with a series of tutorials for writing “good” documentation. I gave an R-specific tutorial where I discussed using devtools to both develop and document your package.</description>
    </item>
    
    <item>
      <title>superheat 0.1.0</title>
      <link>/blog/2017-02-05-superheat-cran/</link>
      <pubDate>Sun, 05 Feb 2017 09:44:30 -0800</pubDate>
      
      <guid>/blog/2017-02-05-superheat-cran/</guid>
      <description>superheat 0.1.0 is now available on CRAN. Superheat makes it easy to create extendable, cutomizable, and most importantly, beautiful heatmaps. It has increased flexibility and user-friendliness when compared to alternatives such as heatmap() and pheatmap().
For usage options see the vignette and for examples see the accompanying paper by Barter and Yu (2017).
You can install the latest version with:
install.packages(&amp;quot;superheat&amp;quot;) Stay tuned for new versions with added features and minor usability tweaks.</description>
    </item>
    
    <item>
      <title>Superheat: a simple example</title>
      <link>/blog/2017-02-02-superheat-example/</link>
      <pubDate>Thu, 02 Feb 2017 09:44:30 -0800</pubDate>
      
      <guid>/blog/2017-02-02-superheat-example/</guid>
      <description>Making beautiful and customizable heatmaps just got way easier… Introducing the superheat R package!
Using superheat, it is now extremely easy to produce plots like the example below describing 10 randomly selected cars from the famous mtcars dataset.
library(superheat) set.seed(1347983) selected.rows &amp;lt;- sample(1:nrow(mtcars), 10) X.col &amp;lt;- matrix(&amp;quot;black&amp;quot;, ncol = ncol(mtcars), nrow = 10) X.col[scale(mtcars[selected.rows, ]) &amp;lt; 0] &amp;lt;- &amp;quot;white&amp;quot; superheat(mtcars[selected.rows,], # add text X.text = round(as.matrix(mtcars[selected.rows, ])), X.text.col = X.col, # scale columns scale = T, # label aesthetics left.</description>
    </item>
    
    <item>
      <title>The only reason one should ever use a pie chart</title>
      <link>/blog/2015-07-23-pie/</link>
      <pubDate>Sat, 10 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>/blog/2015-07-23-pie/</guid>
      <description>Pie charts are terrible Pie charts are notoriously terrible for data visualization. Humans are genuinely bad at comparing angles. Thus, the only reason one should ever use a pie chart is to make beautiful pie-chart-art.
par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;), col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;), init.angle = -50, border = NA )  Figure 1: Pyramid pie chart art.</description>
    </item>
    
  </channel>
</rss>