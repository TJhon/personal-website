<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Rebecca Barter</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Rebecca Barter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jul 2020 23:13:14 -0500</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Across (dplyr1.0.0): applying dplyr functions across multiple columns</title>
      <link>/blog/2020-07-09-across/</link>
      <pubDate>Thu, 09 Jul 2020 23:13:14 -0500</pubDate>
      
      <guid>/blog/2020-07-09-across/</guid>
      <description>Select helpers: selecting columns to apply the function to Using in-line functions with across A mutate example A select example   I often find that I want to use a dplyr function on multiple columns at once. For instance, perhaps I want to scale all of the numeric variables at once using a mutate function, or I want to provide the same summary for three of my variables.</description>
    </item>
    
    <item>
      <title>Tidymodels: tidy machine learning in R</title>
      <link>/blog/2020-03-25_machine_learning/</link>
      <pubDate>Tue, 14 Apr 2020 23:13:14 -0500</pubDate>
      
      <guid>/blog/2020-03-25_machine_learning/</guid>
      <description>What is tidymodels Getting set up Split into train/test Define a recipe Specify the model Put it all together in a workflow Tune the parameters Finalize the workflow Evaluate the model on the test set Fitting and using your final model Variable importance   There’s a new modeling pipeline in town: tidymodels. Over the past few years, tidymodels has been gradually emerging as the tidyverse’s machine learning toolkit.</description>
    </item>
    
    <item>
      <title>5 useful R tips from rstudio::conf(2020) - tidy eval, piping, conflicts, bar charts and colors</title>
      <link>/blog/2020-02-05_rstudio_conf/</link>
      <pubDate>Thu, 06 Feb 2020 23:13:14 -0500</pubDate>
      
      <guid>/blog/2020-02-05_rstudio_conf/</guid>
      <description>Tip 1: Tidy evaluation Tip 2: Pipe into later arguments of a function using . Tip 3: Function conflicts workaround (no more dplyr::select()) Tip 4: geom_col(): you’ll never have to specify “stat = identity” for your bar plots ever again! Tip 5: Using show_col() for viewing colour palettes   This was my second year attending rstudio::conf() as a diversity scholar (and my first time as a speaker), and I was yet again blown away by the friendliness of the community and the quality of the talks.</description>
    </item>
    
    <item>
      <title>Becoming an R blogger</title>
      <link>/blog/2020-02-03_blogger/</link>
      <pubDate>Mon, 03 Feb 2020 23:13:14 -0500</pubDate>
      
      <guid>/blog/2020-02-03_blogger/</guid>
      <description>Why start a blog? How to choose a topic Use interesting and easily accessible data examples Keep it simple Creating and hosting your blog Spreading the word Go forth and blog!   This year I was given the opportunity to talk at rstudio::conf(2020), which, if you’ve never been, is one of those rare conferences where every person you meet is both extremely friendly and excited about R, and you learn a million fun and useful things that you can actually use.</description>
    </item>
    
    <item>
      <title>Learn to purrr</title>
      <link>/blog/2019-08-19_purrr/</link>
      <pubDate>Mon, 19 Aug 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-08-19_purrr/</guid>
      <description>Map functions: beyond apply Simplest usage: repeated looping with map The tilde-dot shorthand for functions Applying map functions in a slightly more interesting context Maps with multiple input objects List columns and Nested data frames Nesting the gapminder data  Advanced exercise  Additional purrr functionalities for lists Keep/Discard: select_if for lists Reduce Logical statements for lists  Answer to advanced exercise    “It was on the corner of the street that he noticed the first sign of something peculiar - a cat reading a map” - J.</description>
    </item>
    
    <item>
      <title>Transitioning into the tidyverse (part 2)</title>
      <link>/blog/2019-08-05_base_r_to_tidyverse_pt2/</link>
      <pubDate>Mon, 05 Aug 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-08-05_base_r_to_tidyverse_pt2/</guid>
      <description>Data shaping: tidyr Gathering and spreading Combining and separating variables  Replacing loops: purrr Loading data: readr Storing data: tibbles Dates, factors and strings: lubridate, forcats and stringr Handling dates and times: lubridate Handling factors: forcats Handling strings: stringr    If you’re new to the tidyverse, I recommend that you first read part one of this two-part series on transitioning into the tidyverse. Part 1 focuses on what I feel are the most important aspects and packages of the tidyverse: tidy thinking, piping, dplyr and ggplot2.</description>
    </item>
    
    <item>
      <title>Transitioning into the tidyverse (part 1)</title>
      <link>/blog/2019-08-05_base_r_to_tidyverse/</link>
      <pubDate>Mon, 05 Aug 2019 22:13:14 -0500</pubDate>
      
      <guid>/blog/2019-08-05_base_r_to_tidyverse/</guid>
      <description>Entering the tidyverse Piping: %&amp;gt;% Data manipulation: dplyr select: select columns filter: filter to rows that satisfy certain conditions mutate: add a new variable arrange: arrange the rows of the data frame in order a variable group_by: apply other dplyr functions separately within within a group defined by one or more variables summarise/summarize: define a variable that is a summary of other variables More dplyr functions  Visualization: ggplot2 Adding geom layers More aesthetic mappings based on variables Other types of layers Histograms Boxplots Faceting  Customizing ggplot2    Most people who learned R before the tidyverse have likely started to feel a nibble of pressure to get aboard the tidyverse train.</description>
    </item>
    
    <item>
      <title>Using the recipes package for easy pre-processing</title>
      <link>/blog/2019-06-06_pre_processing/</link>
      <pubDate>Thu, 06 Jun 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-06-06_pre_processing/</guid>
      <description>Pre-processing data in R used to be the bane of my existence. For something that should be fairly straightforward, it often really wasn’t. Often my frustrations stemmed from simple things such as factor variables having different levels in the training data and test data, or a variable having missing values in the test data but not in the training data. I’d write a function that would pre-process the training data, and when I’d try to apply it to the test data, R would cry and yell and just be generally unpleasant.</description>
    </item>
    
    <item>
      <title>mutate_all(), select_if(), summarise_at()... what&#39;s the deal with scoped verbs?!</title>
      <link>/blog/2019-01-23_scoped-verbs/</link>
      <pubDate>Wed, 23 Jan 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-01-23_scoped-verbs/</guid>
      <description>A quick useful aside: Using shorthand for functions The _if() scoped variant: perform an operation on variables that satisfy a logical criteria  select_if() rename_if() mutate_if() summarise_if()  The _at() scoped variant: perform an operation only on variables specified by name  Select helpers rename_at() mutate_at() summarise_at()  The _all() scoped variant: perform an operation on all variables at once  rename_all() mutate_all() summarise_all()  Conclusion   Note: Scoped verbs have now essentially been superseded by accross() (soon to be available in dplyr 1.</description>
    </item>
    
    <item>
      <title>Getting fancy with ggplot2: code for alternatives to grouped bar charts</title>
      <link>/blog/2018-05-29_getting_fancy_ggplot2/</link>
      <pubDate>Tue, 29 May 2018 23:13:14 -0500</pubDate>
      
      <guid>/blog/2018-05-29_getting_fancy_ggplot2/</guid>
      <description>Here I provide the code I used to create the figures from my previous post on alternatives to grouped bar charts. You are encouraged to play with them yourself!
The key to creating unique and creative visualizations using libraries such as ggplot (or even just straight SVG) is (1) to move away from thinking of data visualization only as the default plot types (bar plots, boxplots, scatterplots, etc), and (2) to realise that most visualizations are essentially lines and circles that you can arrange however you desire in space.</description>
    </item>
    
    <item>
      <title>Alternatives to grouped bar charts</title>
      <link>/blog/2018-05-29_alternatives_dodged_bars/</link>
      <pubDate>Tue, 29 May 2018 21:13:14 -0500</pubDate>
      
      <guid>/blog/2018-05-29_alternatives_dodged_bars/</guid>
      <description>At some point in your life you have probably found yourself standing face-to-face with a beast known as a grouped bar chart. Perhaps it was in a research paper where the authors were trying to compare the results of several models across different datasets, or it was in a talk given by a colleague who was trying to compare the popularity of different products among distinct groups of consumers.</description>
    </item>
    
    <item>
      <title>ggplot2: Mastering the basics</title>
      <link>/blog/2017-11-17-ggplot2_tutorial/</link>
      <pubDate>Fri, 17 Nov 2017 22:13:14 -0500</pubDate>
      
      <guid>/blog/2017-11-17-ggplot2_tutorial/</guid>
      <description>An interactive Jupyter Notebook version of this tutorial can be found at https://github.com/rlbarter/ggplot2-thw. Feel free to download it and use for your own learning or teaching adventures!
Useful resources for learning ggplot2  ggplot2 book (https://www.amazon.com/dp/0387981403/ref=cm_sw_su_dp?tag=ggplot2-20) by Hadley Wickham The layered grammar of graphics (http://vita.had.co.nz/papers/layered-grammar.pdf) by Hadley Wickham   Materials outline I will begin by providing an overview of the layered grammar of graphics upon which ggplot2 is built.</description>
    </item>
    
    <item>
      <title>A basic tutorial of caret: the machine learning package in R</title>
      <link>/blog/2017-11-17-caret_tutorial/</link>
      <pubDate>Fri, 17 Nov 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-11-17-caret_tutorial/</guid>
      <description>Note: If you’re new to caret, I suggest learning tidymodels instead (http://www.rebeccabarter.com/blog/2020-03-25_machine_learning/). Tidymodels is essentially caret’s successor. Don’t worry though, your caret code will still work!
Older note: This tutorial was based on an older version of the abalone data that had a binary old varibale rather than a numeric age variable. It has been modified lightly so that it uses a manual old variable (is the abalone older than 10 or not) and ignores the numeric age variable.</description>
    </item>
    
    <item>
      <title>A Basic Data Science Workflow</title>
      <link>/blog/2017-08-16-data-science-workflow/</link>
      <pubDate>Fri, 18 Aug 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-08-16-data-science-workflow/</guid>
      <description>Developing a seamless, clean workflow for data analysis is harder than it sounds, especially because this is something that is almost never explicitly taught. Apparently we are all just supposed to “figure it out for ourselves”. For most of us, when we start our first few analysis projects, we basically have no idea how we are going to structure all of our files, or even what files we will need to make.</description>
    </item>
    
    <item>
      <title>Coolors: choosing color schemes</title>
      <link>/blog/2017-06-27-colors/</link>
      <pubDate>Tue, 27 Jun 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-06-27-colors/</guid>
      <description>Choosing a color palette for a visualization can be one of the most time consuming parts for perfectionists like me. It can be surprisingly difficult to decide on a palette that is both visually appealing and practical, but fortunately there do exist websites to help!
For example, Coolors shoots random, appealing, color palettes at you and you can swipe from one to the next with a hit of a space-bar.</description>
    </item>
    
    <item>
      <title>Interactive visualization in R</title>
      <link>/blog/2017-04-20-interactive/</link>
      <pubDate>Thu, 20 Apr 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-04-20-interactive/</guid>
      <description>Last week I gave an SGSA seminar on interactive visualizations in R.
Here is a long-form version of the talk.
Why be interactive? Interactivity allows the viewer to engage with your data in ways impossible by static graphs. With an interactive plot, the viewer can zoom into the areas the care about, highlight the data points that are relevant to them and hide the information that isn’t.</description>
    </item>
    
    <item>
      <title>Docathon: A Week of Doumentation</title>
      <link>/blog/2017-03-7-docathon/</link>
      <pubDate>Tue, 07 Mar 2017 21:13:14 -0500</pubDate>
      
      <guid>/blog/2017-03-7-docathon/</guid>
      <description>This week is the Docathon at BIDS (a.k.a. that wonderful place that I spend all my time).
A docathon is like a hackathon but is focused on developing material and tools for documentation. We have loads of projects signed up to receive some documentation-love and an impressive number of excited participants!
We kicked off the event with a series of tutorials for writing “good” documentation. I gave an R-specific tutorial where I discussed using devtools to both develop and document your package.</description>
    </item>
    
    <item>
      <title>superheat 0.1.0</title>
      <link>/blog/2017-02-05-superheat-cran/</link>
      <pubDate>Sun, 05 Feb 2017 09:44:30 -0800</pubDate>
      
      <guid>/blog/2017-02-05-superheat-cran/</guid>
      <description>superheat 0.1.0 is now available on CRAN. Superheat makes it easy to create extendable, cutomizable, and most importantly, beautiful heatmaps. It has increased flexibility and user-friendliness when compared to alternatives such as heatmap() and pheatmap().
For usage options see the vignette and for examples see the accompanying paper by Barter and Yu (2017).
You can install the latest version with:
install.packages(&amp;quot;superheat&amp;quot;) Stay tuned for new versions with added features and minor usability tweaks.</description>
    </item>
    
    <item>
      <title>Superheat: a simple example</title>
      <link>/blog/2017-02-02-superheat-example/</link>
      <pubDate>Thu, 02 Feb 2017 09:44:30 -0800</pubDate>
      
      <guid>/blog/2017-02-02-superheat-example/</guid>
      <description>Making beautiful and customizable heatmaps just got way easier… Introducing the superheat R package!
Using superheat, it is now extremely easy to produce plots like the example below describing 10 randomly selected cars from the famous mtcars dataset.
library(superheat) set.seed(1347983) selected.rows &amp;lt;- sample(1:nrow(mtcars), 10) X.col &amp;lt;- matrix(&amp;quot;black&amp;quot;, ncol = ncol(mtcars), nrow = 10) X.col[scale(mtcars[selected.rows, ]) &amp;lt; 0] &amp;lt;- &amp;quot;white&amp;quot; superheat(mtcars[selected.rows,], # add text X.text = round(as.matrix(mtcars[selected.rows, ])), X.text.col = X.</description>
    </item>
    
    <item>
      <title>The only reason one should ever use a pie chart</title>
      <link>/blog/2015-07-23-pie/</link>
      <pubDate>Sat, 10 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>/blog/2015-07-23-pie/</guid>
      <description>Pie charts are terrible Pie charts are notoriously terrible for data visualization. Humans are genuinely bad at comparing angles. Thus, the only reason one should ever use a pie chart is to make beautiful pie-chart-art.
par(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;), col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;), init.angle = -50, border = NA )  Figure 1: Pyramid pie chart art.</description>
    </item>
    
  </channel>
</rss>