<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidyverse on Rebecca Barter</title>
    <link>/categories/tidyverse/</link>
    <description>Recent content in Tidyverse on Rebecca Barter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2019 23:13:14 -0500</lastBuildDate>
    
	<atom:link href="/categories/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transitioning into the tidyverse (part 2)</title>
      <link>/blog/2019-08-05_base_r_to_tidyverse_pt2/</link>
      <pubDate>Mon, 05 Aug 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-08-05_base_r_to_tidyverse_pt2/</guid>
      <description>Data shaping: tidyr Gathering and spreading Combining and separating variables  Replacing loops: purrr Loading data: readr Storing data: tibbles Dates, factors and strings: lubridate, forcats and stringr Handling dates and times: lubridate Handling factors: forcats Handling strings: stringr    If youâ€™re new to the tidyverse, I recommend that you first read part one of this two-part series on transitioning into the tidyverse. Part 1 focuses on what I feel are the most important aspects and packages of the tidyverse: tidy thinking, piping, dplyr and ggplot2.</description>
    </item>
    
    <item>
      <title>Transitioning into the tidyverse (part 1)</title>
      <link>/blog/2019-08-05_base_r_to_tidyverse/</link>
      <pubDate>Mon, 05 Aug 2019 22:13:14 -0500</pubDate>
      
      <guid>/blog/2019-08-05_base_r_to_tidyverse/</guid>
      <description>Entering the tidyverse Piping: %&amp;gt;% Data manipulation: dplyr select: select columns filter: filter to rows that satisfy certain conditions mutate: add a new variable arrange: arrange the rows of the data frame in order a variable group_by: apply other dplyr functions separately within within a group defined by one or more variables summarise/summarize: define a variable that is a summary of other variables More dplyr functions  Visualization: ggplot2 Adding geom layers More aesthetic mappings based on variables Other types of layers Histograms Boxplots Faceting  Customizing ggplot2    Most people who learned R before the tidyverse have likely started to feel a nibble of pressure to get aboard the tidyverse train.</description>
    </item>
    
    <item>
      <title>mutate_all(), select_if(), summarise_at()... what&#39;s the deal with scoped verbs?!</title>
      <link>/blog/2019-01-23_scoped-verbs/</link>
      <pubDate>Wed, 23 Jan 2019 23:13:14 -0500</pubDate>
      
      <guid>/blog/2019-01-23_scoped-verbs/</guid>
      <description>A quick useful aside: Using shorthand for functions The _if() scoped variant: perform an operation on variables that satisfy a logical criteria select_if() rename_if() mutate_if() summarise_if()  The _at() scoped variant: perform an operation only on variables specified by name Select helpers rename_at() mutate_at() summarise_at()  The _all() scoped variant: perform an operation on all variables at once rename_all() mutate_all() summarise_all()  Conclusion   I often find myself wishing that I could apply the same mutate function to several columns in a data frame at once, such as convert all factors to characters, or do something to all columns that have missing values, or select all variables whose names end with _important.</description>
    </item>
    
  </channel>
</rss>